{"version":3,"sources":["Set.js"],"names":["define","arrays","collections","Collection","Set","inherit","klassName","clone","items","this","_","difference","setB","result","_getInnerItems","i","length","item","contains","push","exclude","indexOf","splice","trigger","data","include","iterator","hasNext","_items","next","intersection","isSubSet","isSuperSet","union","setA","init","makeArray"],"mappings":";;;;;;;AAAAA,QACI,uBACA,gBACA,gBACD,SAASC,EAAOC,EAAaC,GAE5B,GAAIC,GAAMF,EAAYE,IAAMD,EAAWE,SAEnCC,UAAa,MAQbC,MAAY,WACR,MAAO,IAAIH,IACPI,MAAYC,KAAKC,EAAEF,SAQ3BG,WAAa,SAAiBC,GAG1B,IAAK,GAFDC,MACAL,EAAMC,KAAKK,iBACNC,EAAI,EAAGA,EAAEP,EAAMQ,OAAQD,IAAK,CACjC,GAAIE,GAAKT,EAAMO,EACXH,GAAKM,SAASD,IACdJ,EAAOM,KAAKF,GAGpB,MAAO,IAAIb,GAAIS,IAGnBO,QAAU,SAAiBH,GACvB,GAAIT,GAAQC,KAAKC,EAAEF,MACfO,EAAIP,EAAMa,QAAQJ,EAClBF,IAAG,IACHP,EAAMc,OAAOP,EAAE,GACfN,KAAKc,QAAQ,mBACTC,MACIP,OAMhBQ,QAAU,SAAiBR,GACvB,GAAIT,GAAQC,KAAKC,EAAEF,KACfA,GAAMa,QAAQJ,GAAM,IACpBT,EAAMW,KAAKF,GACXR,KAAKc,QAAQ,mBACTC,MACIP,OAMhBS,SAAa,WACT,GAAIX,GAAG,CACP,QACIY,QAAU,WACN,MAAOZ,GAAIN,KAAKmB,OAAOZ,QAE3Ba,KAAO,WACH,MAAOpB,MAAKmB,OAAOb,QAS/Be,aAAe,SAAiBlB,GAG5B,IAAK,GAFDC,MACAL,EAAMC,KAAKK,iBACNC,EAAI,EAAGA,EAAEP,EAAMQ,OAAQD,IAAK,CACjC,GAAIE,GAAKT,EAAMO,EACZH,GAAKM,SAASD,IACbJ,EAAOM,KAAKF,GAGpB,MAAO,IAAIb,GAAIS,IAQnBkB,SAAW,SAAiBnB,GAExB,IAAK,GADDJ,GAAMC,KAAKK,iBACNC,EAAI,EAAGA,EAAEP,EAAMQ,OAAQD,IAAK,CACjC,GAAIE,GAAKT,EAAMO,EACf,KAAIH,EAAKM,SAASD,GACd,OAAO,EAGf,OAAO,GAOXe,WAAa,SAAiBpB,GAC1B,MAAOA,GAAKmB,SAAStB,OAOzBwB,MAAQ,SAAiBC,EAActB,GAGnC,IAAK,GAFDC,GAASD,EAAKL,QACdC,EAAMC,KAAKK,iBACNC,EAAI,EAAGA,EAAEP,EAAMQ,OAAQD,IAC5BF,EAAOY,QAAQjB,EAAMO,GAEzB,OAAOF,IAGXsB,KAAU,SAAmBX,GACrBA,EACAf,KAAKmB,OAAS3B,EAAOmC,UAAUZ,GAE/Bf,KAAKmB,YAOjB,OAAOxB","file":"../Set.js","sourcesContent":["define([\r\n    \"skylark-langx/arrays\",\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function(arrays,collections, Collection) {\r\n\r\n    var Set = collections.Set = Collection.inherit({\r\n\r\n        \"klassName\": \"Set\",\r\n\r\n        /*\r\n         *Returns a  copy of this Set instance. (The items themselves are not copied.)\r\n         *@method clone\r\n         *@return {Set}\r\n         *  a clone of this Set instance.\r\n         */\r\n        \"clone\" :   function(){\r\n            return new Set({\r\n                \"items\" :   this._.items\r\n            });\r\n        },\r\n\r\n        /*\r\n         *Returns everything in this set that is not in setB.\r\n         *@method intersection\r\n         */\r\n        difference : function(/*Set*/ setB){\r\n            var result = [];\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(!setB.contains(item)){\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return new Set(result);\r\n        },\r\n\r\n        exclude : function(/*Item*/item) {\r\n            var items = this._.items,\r\n                i = items.indexOf(item);\r\n            if (i>=0) {\r\n                items.splice(i,1);\r\n                this.trigger(\"changed:exclude\",{\r\n                    \"data\" :  [\r\n                        item\r\n                    ]\r\n                });\r\n            }\r\n        },\r\n\r\n        include : function(/*Item*/item){\r\n            var items = this._.items;\r\n            if (items.indexOf(item)<0) {\r\n                items.push(item);\r\n                this.trigger(\"changed:include\",{\r\n                    \"data\" :  [\r\n                        item\r\n                    ]\r\n                });\r\n            }\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    return this._items[i++];\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n         *Return the intersection of the set and passed set.\r\n         *@method intersection\r\n         */\r\n        intersection : function(/*Set*/ setB){\r\n            var result = [];\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(setB.contains(item)){\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return new Set(result);\r\n        },\r\n\r\n\r\n        /*\r\n         *Returns if set B is a subset of the set.\r\n         *@method isSubSet\r\n         */\r\n        isSubSet : function(/*Set*/ setB) {\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(!setB.contains(item)){\r\n                    return false;\r\n                }\r\n            }\r\n            return true;  \r\n        },\r\n\r\n        /*\r\n         *Returns if set B is a superset of the set.\r\n         *@method isSuperSet\r\n         */\r\n        isSuperSet : function(/*Set*/ setB){\r\n            return setB.isSubSet(this);\r\n        },\r\n\r\n        /*\r\n         *Return the union of the set and passed set.\r\n         *\r\n         */\r\n        union : function(/*Set*/ setA, /*Set*/ setB){\r\n            var result = setB.clone();\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                result.include(items[i]);\r\n            }\r\n            return result;  //\r\n        },\r\n\r\n        \"init\"  : function(/*Object*/data){\r\n            if (data) {\r\n                this._items = arrays.makeArray(data);\r\n            } else {\r\n                this._items =  [];\r\n            }\r\n        }\r\n        \r\n\r\n    });\r\n\r\n    return Set;\r\n});\r\n"]}