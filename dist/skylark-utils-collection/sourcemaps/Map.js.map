{"version":3,"sources":["Map.js"],"names":["define","collections","Collection","Map","inherit","klassName","_getInnerItems","this","_items","_clear","_findKeyByRegExp","regExp","callback","items","filter","key","match","get","strKey","silent","contains","iterator","i","hasNext","length","next","set","value","indexOf","push","oldValue","trigger","data","name","remove","idx","findByRegExp","self","item","removeByRegExp","toPlain","plain","toString","delim","join","init"],"mappings":";;;;;;;AACAA,QACI,gBACA,gBACD,SAAUC,EAAaC,GAEtB,GAAIC,GAAMF,EAAYE,IAAMD,EAAWE,SAEnCC,UAAa,MAEbC,eAAiB,WACb,MAAOC,MAAKC,QAGhBC,OAAS,WACLF,KAAKC,WAGTE,iBAAkB,SAASC,EAAQC,GAC/B,GAAIC,GAAQN,KAAKD,gBACjB,OAAOO,GAAMC,OAAO,SAASC,GACzB,QAAIA,EAAIC,MAAML,KACNC,GAAUA,EAASG,IAChB,MAOnBE,IAAQ,SAASC,EAAQC,GAgBrB,GAAsB,gBAAZ,GACN,KAAM,yBAEV,KAAKA,IAAWZ,KAAKa,SAASF,GAC1B,KAAM,0BAGV,IAAIL,GAAQN,KAAKD,gBACjB,OAAOO,GAAMK,IAGjBG,SAAa,WACT,GAAIC,GAAG,CACP,QACIC,QAAU,WACN,MAAOD,GAAIf,KAAKC,OAAOgB,QAE3BC,KAAO,WACH,GAAIV,GAAOR,KAAKC,OAAOc,IACvB,QAAQf,KAAKC,OAAOO,GAAKA,MAKrCW,IAAO,SAAqBR,EAAmBS,GAe3C,GAAsB,gBAAZ,GACN,KAAM,yBAGV,KAAKpB,KAAKa,SAASF,GACf,KAAM,yBAGV,IAAIL,GAAQN,KAAKD,gBACbO,GAAMe,QAAQV,QACdL,EAAMgB,KAAKX,EAEf,IAAIY,GAAWjB,EAAME,IAWrB,OAVIe,KAAaH,IACbd,EAAME,KAAOY,EACbpB,KAAKwB,QAAQ,WAAab,GACtBc,MACIC,KAAOf,EACPS,MAAQA,EACRG,SAAWA,MAIhBvB,MAIX2B,OAAU,SAAqBhB,GAW3B,GAAsB,gBAAZ,GACN,KAAM,yBAEV,IAAIL,GAAQN,KAAKD,iBACb6B,EAAMtB,EAAMe,QAAQV,EACpBiB,IAAO,UACAtB,GAAMK,SACNL,GAAMsB,KAIrBC,aAAc,SAAqBzB,EAAQC,GAevC,GAAIC,MACAwB,EAAO9B,IAMX,OALAA,MAAKG,iBAAiBC,EAAQ,SAASI,GACnC,GAAIuB,GAAOD,EAAKpB,IAAIF,EAChBH,IAAUA,EAAS0B,GACvBzB,EAAMgB,KAAKS,KAERzB,GAGX0B,eAAgB,SAAqB5B,GAWjC,GAAI0B,GAAO9B,IACXA,MAAKG,iBAAiBC,EAAQ,SAASI,GACnCsB,EAAKH,OAAOnB,MAIpByB,QAAW,WASP,IAAK,GAFD3B,GAAQN,KAAKD,iBAERgB,EAAI,EAAGA,EAAIT,EAAMW,OAAQF,IAAK,CACnC,GAAIP,GAAMF,EAAMS,EAChBmB,OAAM1B,GAAOF,EAAME,GAEvB,MAAO0B,QAGXC,SAAY,SAAsBC,GAY9B,GAAI9B,GAAQN,KAAKD,gBAEjB,OAAOO,GAAM+B,KAAMD,GAAS,MAGhCE,KAAQ,SAAqBb,GACzB,GAAInB,GAAQN,KAAKC,SACjB,KAAK,GAAIyB,KAAQD,GACbnB,EAAMgB,KAAKI,GACXpB,EAAMoB,GAAOD,EAAKC,KAK9B,OAAO9B","file":"../Map.js","sourcesContent":["\r\ndefine([\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function( collections, Collection) {\r\n\r\n    var Map = collections.Map = Collection.inherit({\r\n\r\n        \"klassName\": \"Map\",\r\n\r\n        _getInnerItems : function() {\r\n            return this._items;\r\n        },\r\n\r\n        _clear : function() {\r\n            this._items = [];\r\n        },\r\n\r\n        _findKeyByRegExp: function(regExp, callback) {\r\n            var items = this._getInnerItems();\r\n            return items.filter(function(key) {\r\n                if (key.match(regExp)) {\r\n                    if (callback) callback(key);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n\r\n        \"get\":  function(strKey, silent) {\r\n            //desc: \"Returns the item at the specified key in the Hashtable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"The item at the specified key.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key of the item to return.\"\r\n            //}, {\r\n            //    name: \"silent\",\r\n            //    type: Boolean,\r\n            //    desc: \"the silent flag.\",\r\n            //    optional: true\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            if (!silent && !this.contains(strKey)) {\r\n                throw \"hash key is not  existed\";\r\n            }\r\n\r\n            var items = this._getInnerItems();\r\n            return items[strKey];\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    var key =  this._items[i++];\r\n                    return [this._items[key],key];\r\n                }\r\n            }\r\n        },\r\n\r\n        \"set\": function( /*String*/ strKey, /*Object*/ value) {\r\n            //desc: \"Replaces the item at the specified key in the Hashtable with the specified item.\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"key of the item to replace.\"\r\n            //}, {\r\n            //    name: \"value\",\r\n            //    type: Object,\r\n            //    desc: \"item to be stored at the specified position.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n\r\n            if (!this.contains(strKey)) {\r\n                throw \"hash key is not existed\";\r\n            }\r\n\r\n            var items = this._getInnerItems();\r\n            if (items.indexOf(strKey) == -1) {\r\n                items.push(strKey);\r\n            }\r\n            var oldValue = items[key];\r\n            if (oldValue !== value) {\r\n                items[key] = value;\r\n                this.trigger(\"changed:\" + strKey,{\r\n                    data : {\r\n                        name : strKey,\r\n                        value : value,\r\n                        oldValue : oldValue\r\n                    }\r\n                });\r\n            }\r\n            return this;\r\n        },\r\n\r\n\r\n        \"remove\": function( /*String*/ strKey) {\r\n            //desc: \"Removes the first occurrence of a specific item from the Hashtable\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            var items = this._getInnerItems();\r\n            var idx = items.indexOf(strKey);\r\n            if (idx >= 0) {\r\n                delete items[strKey];\r\n                delete items[idx];\r\n            }\r\n        },\r\n\r\n        findByRegExp: function( /*String*/ regExp, callback) {\r\n            //desc: \"find regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}, {\r\n            //    name: \"callback\",\r\n            //    type: Function,\r\n            //    desc: \"the callback method\"\r\n            //}],\r\n            var items = [],\r\n                self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                var item = self.get(key);\r\n                if (callback) callback(item);\r\n                items.push(item);\r\n            });\r\n            return items;\r\n        },\r\n\r\n        removeByRegExp: function( /*String*/ regExp) {\r\n            //desc: \"Removes regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            var self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                self.remove(key);\r\n            });\r\n        },\r\n\r\n        \"toPlain\": function() {\r\n            //desc: \"Returns a plain object containing all of the items in this Hashable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"a plain object containing all of the items in this Hashtable.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems(); \r\n\r\n            for (var i = 0; i < items.length; i++) {\r\n                var key = items[i];\r\n                plain[key] = items[key];\r\n            }\r\n            return plain;\r\n        },\r\n\r\n        \"toString\": function( /*String?*/ delim) {\r\n            //desc: \"implementation of toString, follows [].toString().\",\r\n            //result: {\r\n            //    type: String,\r\n            //   desc: \"The string.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"delim\",\r\n            //    type: String,\r\n            //    desc: \"The delim \",\r\n            //    optional: true\r\n            //}],\r\n            var items = this._getInnerItems();\r\n\r\n            return items.join((delim || \",\"));\r\n        },\r\n\r\n        \"init\": function( /*Object*/ data) {\r\n            var items = this._items = [];\r\n            for (var name in data) {\r\n                items.push(name);\r\n                items[name]= data[name];\r\n            }\r\n        }\r\n       \r\n    });\r\n    return Map;\r\n});\r\n"]}