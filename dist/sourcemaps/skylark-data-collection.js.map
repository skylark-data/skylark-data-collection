{"version":3,"sources":["skylark-data-collection.js"],"names":["define","skylark","attach","Evented","collections","Collection","inherit","klassName","_clear","Error","clear","this","trigger","count","c","it","iterator","hasNext","forEach","func","thisArg","item","next","call","toArray","items","push","arrays","List","_getInnerItems","_items","contains","indexOf","length","getAll","get","index","getRange","a1","i","Math","max","self","init","data","makeArray","Map","_findKeyByRegExp","regExp","callback","filter","key","match","strKey","silent","set","value","oldValue","updated","name","remove","idx","findByRegExp","removeByRegExp","toPlain","plain","toString","delim","join","ArrayList","add","isSingle","addRange","toAdd","clone","_","insert","splice","insertRange","removeFirstMatch","len","removeAt","toRemove","Array","removeRange","removed","setByIndex","old","oldItem","reset","newItems","reverse","sort","fn","types","Deferred","PagedList","_options","_cachePageData","pageNo","pageItems","pages","_pages","oldLen","_count","pageSize","OldLen","oldCount","_getPageData","_laodPageData","loadData","from","deferred","then","resolve","err","reject","promise","_pageSize","totalCount","_endless","Infinity","totalPageCount","ceil","pageCount","hasMore","loadMore","getPage","autoLoad","fetchPage","when","options","Queue","dequeue","shift","enqueue","Set","difference","setB","result","exclude","include","intersection","isSubSet","isSuperSet","union","setA","Stack","inhert","peek","lastIndex","pop","TreeItem","_internalChildren","copy","children","_checkPublicOperation","_internalSetParent","parent","_internalAddChild","at","child","_internalCreateItem","undefined","_internalRemoveChildAt","_internalClearChildren","root","createItem","type","getter","firstChild","fullPath","path","lastChild","lastDescendants","last","level","nextItem","getNextChild","nextSibling","prev","prevItem","prevSibling","getPrevChild","r","prependChild","addChild","appendChild","canHaveChildren","childrenCount","clearChildren","getChildAt","getChildren","hasChildren","indexOfChild","insertChild","parents","p","removeChild","removeChildAt","Tree","firstItem","ret","lastItem","noself","main"],"mappings":"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","file":"../skylark-data-collection.js","sourcesContent":["define('skylark-data-collection/collections',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"data.collections\",{});\r\n});\ndefine('skylark-data-collection/Collection',[\r\n    \"skylark-langx/Evented\",\r\n    \"./collections\"\r\n], function(Evented, collections) {\r\n\r\n    var Collection = collections.Collection = Evented.inherit({\r\n\r\n        \"klassName\": \"Collection\",\r\n\r\n        _clear: function() {\r\n            throw new Error('Unimplemented API');\r\n        },\r\n\r\n        \"clear\": function() {\r\n            //desc: \"Removes all items from the Collection\",\r\n            //result: {\r\n            //    type: Collection,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [],\r\n            this._clear();\r\n            this.trigger(\"changed:clear\");\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *@method count\r\n         *@return {Number}\r\n         */\r\n        count : /*Number*/function () {\r\n            var c = 0,\r\n                it = this.iterator();\r\n            while(!it.hasNext()){\r\n                c++;\r\n            }\r\n            return c;\r\n        },\r\n\r\n        \"forEach\": function( /*Function*/ func, /*Object?*/ thisArg) {\r\n            //desc: \"Executes a provided callback function once per collection item.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"the number of items\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"func\",\r\n            //    type: Function,\r\n            //    desc: \"Function to execute for each element.\"\r\n            //}, {\r\n            //    name: \"thisArg\",\r\n            //    type: Object,\r\n            //    desc: \"Value to use as this when executing callback.\"\r\n            //}],\r\n            var it = this.iterator();\r\n            while(it.hasNext()){\r\n                var item = it.next();\r\n                func.call(thisArg || item,item);\r\n            }\r\n            return this;\r\n\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            throw new Error('Unimplemented API');\r\n        },\r\n\r\n        \"toArray\": function() {\r\n            //desc: \"Returns an array containing all of the items in this collection in proper sequence (from first to last item).\",\r\n            //result: {\r\n            //    type: Array,\r\n            //    desc: \"an array containing all of the elements in this collection in proper sequence\"\r\n            //},\r\n            //params: [],\r\n            var items = [],\r\n                it = this.iterator();\r\n            while(!it.hasNext()){\r\n                items.push(it.next());\r\n            }\r\n            return items;\r\n        }\r\n    });\r\n\r\n    return Collection;\r\n});\r\n\ndefine('skylark-data-collection/List',[\r\n    \"skylark-langx/arrays\",\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function(arrays,collections, Collection) {\r\n\r\n    var List = collections.List = Collection.inherit({\r\n        \r\n        \"klassName\": \"List\",\r\n\r\n\r\n        _getInnerItems : function() {\r\n            return this._items;\r\n        },\r\n\r\n        _clear : function() {\r\n            this._items = [];\r\n        },\r\n\r\n        \"contains\": function( /*Object*/ item) {\r\n            //desc: \"Determines whether an item is in the Collection.\",\r\n            //result: {\r\n            //    type: Boolean,\r\n            //    desc: \"true if item is found in the Collection; otherwise, false.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to check.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            return items.indexOf(item) >= 0;\r\n        },\r\n\r\n        \"count\": function() {\r\n            //desc: \"Gets the number of items actually contained in the Collection.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"the number of items\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            return items.length;\r\n        },\r\n\r\n        \"getAll\": function() {\r\n            //desc: \"Returns all items.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"all items\"\r\n            //},\r\n            //params: [],\r\n            return this._getInnerItems();\r\n        },\r\n\r\n        \"get\": function(index) {\r\n            //desc: \"Returns the item at the specified position in the List.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"The item at the specified position.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"index of the element to return.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index >= items.length) {\r\n                throw new Error(\"Not exist:\" + index);\r\n            }\r\n            return items[index];\r\n        },\r\n\r\n        \"getRange\": function( /*Number*/ index, /*Number*/ count) {\r\n            //desc: \"Returns an Array which represents a subset of the items in the source list.\",\r\n            //result: {\r\n            //    type: Array,\r\n            //    desc: \"An Array which represents a subset of the items in the source list.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based list index at which the range starts.\"\r\n            //}, {\r\n            //    name: \"count\",\r\n            //    type: Number,\r\n            //    desc: \"The number of items in the range.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                a1 = [];\r\n            for (var i = Math.max(index, 0); i < count; i++) {\r\n                if (i >= items.length) {\r\n                    break;\r\n                }\r\n                a1.push(items[i]);\r\n            }\r\n            return a1;\r\n        },\r\n\r\n        \"indexOf\": function( /*Object*/ item) {\r\n            //desc: \"Searches for the specified Object and returns the zero-based index of the first occurrence within the entire list.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the first occurrence of value within the entire list,if found; otherwise, -1.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The Object to locate in the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            return items.indexOf(item);\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0,\r\n                self = this;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < self._items.length;\r\n                },\r\n                next : function() {\r\n                    return self._items[i++];\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n         *@params {Object}args\r\n         *  a plain object for the initialize arguments.\r\n         */\r\n        init :  function(/*Array*/data){\r\n            if (data) {\r\n                this._items = arrays.makeArray(data);\r\n            } else {\r\n                this._items =  [];\r\n            }\r\n        }\r\n    });\r\n\r\n    return List;\r\n});\r\n\n\r\ndefine('skylark-data-collection/Map',[\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function( collections, Collection) {\r\n\r\n    var Map = collections.Map = Collection.inherit({\r\n\r\n        \"klassName\": \"Map\",\r\n\r\n        _getInnerItems : function() {\r\n            return this._items;\r\n        },\r\n\r\n        _clear : function() {\r\n            this._items = [];\r\n        },\r\n\r\n        _findKeyByRegExp: function(regExp, callback) {\r\n            var items = this._getInnerItems();\r\n            return items.filter(function(key) {\r\n                if (key.match(regExp)) {\r\n                    if (callback) callback(key);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n\r\n        \"get\":  function(strKey, silent) {\r\n            //desc: \"Returns the item at the specified key in the Hashtable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"The item at the specified key.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key of the item to return.\"\r\n            //}, {\r\n            //    name: \"silent\",\r\n            //    type: Boolean,\r\n            //    desc: \"the silent flag.\",\r\n            //    optional: true\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            /*\r\n            if (!silent && !this.contains(strKey)) {\r\n                throw \"hash key is not  existed\";\r\n            }\r\n            */\r\n            var items = this._getInnerItems();\r\n            return items[strKey];\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    var key =  this._items[i++];\r\n                    return [this._items[key],key];\r\n                }\r\n            }\r\n        },\r\n\r\n        \"set\": function( /*String*/ strKey, /*Object*/ value) {\r\n            //desc: \"Replaces the item at the specified key in the Hashtable with the specified item.\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"key of the item to replace.\"\r\n            //}, {\r\n            //    name: \"value\",\r\n            //    type: Object,\r\n            //    desc: \"item to be stored at the specified position.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n\r\n            /*\r\n            if (!this.contains(strKey)) {\r\n                throw \"hash key is not existed\";\r\n            }\r\n            */\r\n\r\n            var items = this._getInnerItems();\r\n            if (items.indexOf(strKey) == -1) {\r\n                items.push(strKey);\r\n            }\r\n            var oldValue = items[strKey];\r\n            if (oldValue !== value) {\r\n                items[strKey] = value;\r\n                var updated = {};\r\n                updated[strKey] = {\r\n                    name : strKey,\r\n                    value : value,\r\n                    oldValue : oldValue\r\n                };\r\n                this.trigger(\"changed\" ,{ //TODO: \"changed:\"+ strKey\r\n                    data : updated\r\n                });\r\n            }\r\n            return this;\r\n        },\r\n\r\n\r\n        \"remove\": function( /*String*/ strKey) {\r\n            //desc: \"Removes the first occurrence of a specific item from the Hashtable\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            var items = this._getInnerItems();\r\n            var idx = items.indexOf(strKey);\r\n            if (idx >= 0) {\r\n                delete items[strKey];\r\n                delete items[idx];\r\n            }\r\n        },\r\n\r\n        findByRegExp: function( /*String*/ regExp, callback) {\r\n            //desc: \"find regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}, {\r\n            //    name: \"callback\",\r\n            //    type: Function,\r\n            //    desc: \"the callback method\"\r\n            //}],\r\n            var items = [],\r\n                self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                var item = self.get(key);\r\n                if (callback) callback(item);\r\n                items.push(item);\r\n            });\r\n            return items;\r\n        },\r\n\r\n        removeByRegExp: function( /*String*/ regExp) {\r\n            //desc: \"Removes regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            var self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                self.remove(key);\r\n            });\r\n        },\r\n\r\n        \"toPlain\": function() {\r\n            //desc: \"Returns a plain object containing all of the items in this Hashable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"a plain object containing all of the items in this Hashtable.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems(); \r\n\r\n            for (var i = 0; i < items.length; i++) {\r\n                var key = items[i];\r\n                plain[key] = items[key];\r\n            }\r\n            return plain;\r\n        },\r\n\r\n        \"toString\": function( /*String?*/ delim) {\r\n            //desc: \"implementation of toString, follows [].toString().\",\r\n            //result: {\r\n            //    type: String,\r\n            //   desc: \"The string.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"delim\",\r\n            //    type: String,\r\n            //    desc: \"The delim \",\r\n            //    optional: true\r\n            //}],\r\n            var items = this._getInnerItems();\r\n\r\n            return items.join((delim || \",\"));\r\n        },\r\n\r\n        \"init\": function( /*Object*/ data) {\r\n            var items = this._items = [];\r\n            for (var name in data) {\r\n                items.push(name);\r\n                items[name]= data[name];\r\n            }\r\n        }\r\n       \r\n    });\r\n    return Map;\r\n});\r\n\ndefine('skylark-data-collection/ArrayList',[\r\n    \"./collections\",\r\n    \"./List\"\r\n], function(collections, List) {\r\n\r\n    var ArrayList = collections.ArrayList = List.inherit({\r\n        \r\n        \"klassName\": \"ArrayList\",\r\n\r\n        \"add\": function(item) {\r\n            //desc: \"Adds an item to the end of the List.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to be added to the end of the List. \\nThe item can be null.\"\r\n            //}],\r\n\r\n            var items = this._getInnerItems();\r\n            items.push(item);\r\n            this.trigger(\"changed:add\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\": items.length - 1, isSingle: true}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"addRange\": function( /*Collection*/ c) {\r\n            //desc: \"Adds the items of a collection into the List at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"c\",\r\n            //    type: [Collection, Array],\r\n            //    desc: \"The Collection whose items should be added into the List.\\nThe collection itself cannot be null, but it can contain items that are null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            var a1 = c.toArray ? c.toArray() : c,\r\n                toAdd = [];\r\n            for (var i = 0; i < a1.length; i++) {\r\n                items.push(a1[i]);\r\n                toAdd.push({\r\n                    \"item\" : a1[i],\r\n                    \"index\" : items.length-1\r\n                });\r\n            }\r\n            this.trigger(\"changed:add\",{\r\n                \"data\" :  toAdd\r\n            });\r\n            return this;\r\n        },\r\n\r\n\r\n        \"clone\": function() {\r\n            //desc: \"Returns a shallow copy of this ArrayList instance. (The items themselves are not copied.)\",\r\n            //result: {\r\n            //    type: ArrayList,\r\n            //   desc: \"a clone of this ArrayList instance.\"\r\n            //},\r\n            //params: [],\r\n\r\n           return new ArrayList({\r\n                \"items\": this._.items\r\n            });\r\n        },\r\n\r\n        \"insert\": function( /*Number*/ index, /*Object*/ item) {\r\n            //desc: \"Inserts an item into the list at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index at which the new item should be inserted.\"\r\n            //}, {\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to insert. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index > items.length) {\r\n                throw new Error(\"invalid parameter!\");\r\n            }\r\n            items.splice(index, 0, item);\r\n            this.trigger(\"changed\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\" : index}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"insertRange\": function( /*Number*/ index, /*Collection*/ c) {\r\n            //desc: \"Inserts the items of a collection into the list at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index at which the new item should be inserted.\"\r\n            //}, {\r\n            //    name: \"c\",\r\n            //    type: Collection,\r\n            //    desc: \"The Collection whose items should be inserted into the ArrayList. \\nThe collection itself cannot be null, but it can contain items that are null. \"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toAdd = [];\r\n            if (index < 0 || index >= items.length) {\r\n                throw new Error(\"invalid parameter!\");\r\n            }\r\n            var a1 = c.toArray();\r\n            for (var i = 0; i<a1.length - 1; i++) {\r\n                items.splice(index+i, 0, a1[i]);\r\n                toAdd.push({\r\n                    \"item\" : a1[i],\r\n                    \"index\" : index+i\r\n                });\r\n            }\r\n            this.trigger(\"changed:insert\",{\r\n                \"data\" :  toAdd\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeFirstMatch\": function( /*Object*/ item) {\r\n            //desc: \"Removes the first occurrence of a specific item from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to remove from the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            for (var i = 0, len = items.length; i < len; i++) {\r\n                if (items[i] === item) {\r\n                    this.removeAt(i);\r\n                    break;\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        \"remove\": function( /*Object*/ item) {\r\n            //desc: \"Removes the all occurrence of a specific item from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to remove from the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toRemove = [];\r\n            for (var i = 0, len = items.length; i < len; i++) {\r\n                if (items[i] === item) {\r\n                    Array.removeAt(items, i);\r\n                    toRemove.push({\r\n                        \"item\" : item,\r\n                        \"index\" : i\r\n                    });\r\n                }\r\n            }\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" :  toRemove\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeAt\": function(index) {\r\n            //desc: \"Removes the item at the specified index of the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the item to remove.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                item = items.splice(index, 1)[0];\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\" : index}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeRange\": function( /*Number*/ index, /*Number*/ count) {\r\n            //desc: \"Removes a range of items from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the item to remove.\"\r\n            //}, {\r\n            //    name: \"count\",\r\n            //    type: Number,\r\n            //    desc: \"The number of items to remove.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toRemove = [];\r\n\r\n            for (var i = index; i<index+count;i++) {\r\n                toRemove.push({\r\n                    \"item\" : items[i],\r\n                    \"index\" : i\r\n                });\r\n            }\r\n            items.splice(index, count);\r\n\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" : {\r\n                    \"removed\" : toRemove\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"setByIndex\": function( /*Number*/ index, /*Item*/ item) {\r\n            //desc: \"Replaces the item at the specified position in the list with the specified item.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"index of the item to replace.\"\r\n            //}, {\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"item to be stored at the specified position.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index >= items.length) throw new Error(\"\" + i);\r\n            var old = items[index];\r\n            items[i] = item;\r\n\r\n            this.trigger(\"changed:update\",{\r\n                \"data\" : [\r\n                    { \"item\" : item, \"index\" : index,\"oldItem\":old}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"reset\": function(newItems) {\r\n            //desc: \"Reset the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            items.length = 0;\r\n            for (var i=0;i<newItems.length;i++){\r\n                items.push(newItems[i]);\r\n            }\r\n            this.trigger(\"changed:reset\");\r\n\r\n            return this;\r\n        },\r\n        \r\n        \"reverse\": function() {\r\n            //desc: \"Reverse the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            items.reverse();\r\n\r\n            this.trigger(\"changed:reverse\");\r\n            return this;\r\n        },\r\n\r\n        \"sort\": function( /*Function?*/ fn) {\r\n            //desc: \"sort the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"fn\",\r\n            //    type: Function,\r\n            //    desc: \"The function for sort\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (fn) {\r\n                items.sort(fn);\r\n            } else {\r\n                items.sort();\r\n            }\r\n            this.trigger(\"changed:sort\");\r\n            return this;\r\n        }\r\n\r\n    });\r\n\r\n    return ArrayList;\r\n});\r\n\n\r\ndefine('skylark-data-collection/PagedList',[\r\n    \"skylark-langx/types\",\r\n    \"skylark-langx/Deferred\",\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function(types, Deferred, collections, Collection) {\r\n    \r\n    var PagedList = collections.PagedList = Collection.inherit({\r\n\r\n        \"klassName\": \"PagedList\",   　\r\n\r\n        //{\r\n        //  provider : function(){},\r\n        //  totalCount : Infinity,  // the total count\r\n        //}\r\n        _options : null,\r\n\r\n        _cachePageData: function(pageNo, pageItems) {\r\n            var pages = this._pages,\r\n                oldLen = this._count,\r\n                len = (pageNo - 1) * this.pageSize + pageItems.length;\r\n\r\n            pages[pageNo] = pageItems;\r\n\r\n            this.trigger(\"changed:cache\",{\r\n                data : {\r\n                    pageNo : pageNo,\r\n                    pageItems : pageItems\r\n                }\r\n            })\r\n\r\n            if (len > OldLen) {\r\n                this._count = len;\r\n                this.trigger(\"changed:count\",{\r\n                    data : {\r\n                        count : len,\r\n                        oldCount : oldLen\r\n                    }\r\n                })\r\n            }\r\n        },\r\n\r\n        _getPageData: function(pageNo) {\r\n            var items = this._getInnerItems(),\r\n                pageItems = [],\r\n                pageSize = this.pageSize,\r\n                idx = (pageNo - 1) * pageSize,\r\n                len = items.length;\r\n\r\n            for (var i = 0; i < pageSize && idx < len; i++, idx++) {\r\n                if (items[idx]) pageItems.push(items[idx]);\r\n            }\r\n            return pageItems;\r\n        },\r\n\r\n        \"_laodPageData\": function( /*Number*/ pageNo) {\r\n            //desc: \"Get a page at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this page for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"pageNo\",\r\n            //    type: Number,\r\n            //}],\r\n            var loadData = this._options.loadData;\r\n            pageSize = this.pageSize,\r\n                from = (pageNo - 1) * pageSize;\r\n            deferred = new Deferred(),\r\n                self = this;\r\n            loadData(from, pageSize).then(function(items) {\r\n                self._cachePageData(pageNo, items);\r\n                deferred.resolve(items);\r\n            }, function(err) {\r\n                deferred.reject(err);\r\n            })\r\n\r\n            return deferred.promise;\r\n\r\n        },\r\n\r\n        \"pageSize\": {\r\n            \"get\": function() {\r\n                return this._pageSize;\r\n            }\r\n        },\r\n\r\n        \"totalCount\": {\r\n            //\"desc\": \"the total count\",\r\n            //\"type\": Number,\r\n            //\"defaultValue\": Infinity\r\n            get : function() {\r\n                return this._options && (this._endless._options || Infinity);\r\n            }\r\n        },\r\n\r\n\r\n        \"totalPageCount\": {\r\n            \"get\": function() {\r\n                return Math.ceil(this.totalCount / this.pageSize);\r\n            }\r\n        },\r\n\r\n        \"count\": {\r\n            //\"desc\": \"the total count\",\r\n            //\"type\": Number,\r\n            //\"defaultValue\": Infinity\r\n            get : function() {\r\n                return this._count;\r\n            }\r\n        },\r\n\r\n        \"pageCount\": {\r\n            \"get\": function() {\r\n                return Math.ceil(this.count / this.pageSize);\r\n            }\r\n        },\r\n\r\n\r\n        \"hasMore\": function() {\r\n            //desc: \"determine if the list has more items\",\r\n            //result: {\r\n            //    type: Boolean,\r\n            //    desc: \"false if reached the end\"\r\n            //},\r\n            //params: [],\r\n            return this.count < this.totalCount;\r\n        },\r\n\r\n        \"loadMore\": function() {\r\n            //desc: \"load more data.\",\r\n            //result: {\r\n            //    type: Promise,\r\n            //    desc: \"deferred object\"\r\n            //},\r\n            //params: [{\r\n            //}],\r\n\r\n           return this._laodPageData(this.pageCount);\r\n           \r\n        },\r\n\r\n\r\n        \"getPage\": function( /*Number*/ pageNo,autoLoad) {\r\n            //desc: \"Get a page at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this page for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"pageNo\",\r\n            //    type: Number,\r\n            //}],\r\n            return  this._getPageData(pageNo);\r\n        },\r\n\r\n        fetchPage: function(pageNo) {\r\n            var pageItems = this._getPageData(pageNo);\r\n            if (!pageItems) {\r\n                return this._laodPageData(pageNo);\r\n            } else {\r\n                return Deferred.when(items);\r\n            }\r\n        },\r\n\r\n        \"init\"    :   function(pageSize,options){\r\n            this._pages = {};\r\n            this._count = 0;\r\n            \r\n            this._options =options;\r\n        }\r\n\r\n    });\r\n\r\n    return PagedList;\r\n});\r\n\n\r\ndefine('skylark-data-collection/Queue',[\r\n    \"./collections\",\r\n\t\"./List\"\r\n],function(collections,List) {\r\n\r\n\tvar Queue = collections.Queue = List.inherit({\r\n\t\t\r\n\t\t\"klassName\"\t:\t\"Queue\",\r\n\r\n\t\t\"clone\" :  function(item) {\r\n\t\t\t//desc : \"Returns a shallow copy of this Queue instance. (The items themselves are not copied.)\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Queue, desc : \"a clone of this Queue instance.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\t\t\tvar items = this._getInnerItems();\r\n\t\t\treturn new Queue({\r\n\t\t\t\t\"items\"\t:\titems\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t\"dequeue\" : function() {\r\n\t\t\t//desc : \"Shift the first element off the queue and return it\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"The first element of the Queue.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\r\n\t\t\tvar items = this._getInnerItems(),\r\n\t\t\t\titem = items.shift();\r\n\r\n            this.trigger(\"changed:dequeue\",{\r\n                \"data\" :  item\r\n            });\r\n\t\t\t\r\n\t\t\treturn item;\r\n\t\t},\r\n\r\n\t\t\"enqueue\" : function(item) {\r\n\t\t\t//desc : \"Puts the passed object at the end of the queue\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"Returns this Queue for chain call.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//\t{name: \"item\", type: Object, desc: \"The Item Object to push onto the Stack.\\nThe item can be null.\"}\r\n\t\t\t//],\r\n\r\n\t\t\tvar items = this._getInnerItems();\r\n\r\n\t\t\titems.push(item);\r\n\r\n            this.trigger(\"changed:enqueue\",{\r\n                \"data\" :  item\r\n            });\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn Queue;\r\n\r\n});\r\n\ndefine('skylark-data-collection/Set',[\r\n    \"skylark-langx/arrays\",\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function(arrays,collections, Collection) {\r\n\r\n    var Set = collections.Set = Collection.inherit({\r\n\r\n        \"klassName\": \"Set\",\r\n\r\n        /*\r\n         *Returns a  copy of this Set instance. (The items themselves are not copied.)\r\n         *@method clone\r\n         *@return {Set}\r\n         *  a clone of this Set instance.\r\n         */\r\n        \"clone\" :   function(){\r\n            return new Set({\r\n                \"items\" :   this._.items\r\n            });\r\n        },\r\n\r\n        /*\r\n         *Returns everything in this set that is not in setB.\r\n         *@method intersection\r\n         */\r\n        difference : function(/*Set*/ setB){\r\n            var result = [];\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(!setB.contains(item)){\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return new Set(result);\r\n        },\r\n\r\n        exclude : function(/*Item*/item) {\r\n            var items = this._.items,\r\n                i = items.indexOf(item);\r\n            if (i>=0) {\r\n                items.splice(i,1);\r\n                this.trigger(\"changed:exclude\",{\r\n                    \"data\" :  [\r\n                        item\r\n                    ]\r\n                });\r\n            }\r\n        },\r\n\r\n        include : function(/*Item*/item){\r\n            var items = this._.items;\r\n            if (items.indexOf(item)<0) {\r\n                items.push(item);\r\n                this.trigger(\"changed:include\",{\r\n                    \"data\" :  [\r\n                        item\r\n                    ]\r\n                });\r\n            }\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    return this._items[i++];\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n         *Return the intersection of the set and passed set.\r\n         *@method intersection\r\n         */\r\n        intersection : function(/*Set*/ setB){\r\n            var result = [];\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(setB.contains(item)){\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return new Set(result);\r\n        },\r\n\r\n\r\n        /*\r\n         *Returns if set B is a subset of the set.\r\n         *@method isSubSet\r\n         */\r\n        isSubSet : function(/*Set*/ setB) {\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(!setB.contains(item)){\r\n                    return false;\r\n                }\r\n            }\r\n            return true;  \r\n        },\r\n\r\n        /*\r\n         *Returns if set B is a superset of the set.\r\n         *@method isSuperSet\r\n         */\r\n        isSuperSet : function(/*Set*/ setB){\r\n            return setB.isSubSet(this);\r\n        },\r\n\r\n        /*\r\n         *Return the union of the set and passed set.\r\n         *\r\n         */\r\n        union : function(/*Set*/ setA, /*Set*/ setB){\r\n            var result = setB.clone();\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                result.include(items[i]);\r\n            }\r\n            return result;  //\r\n        },\r\n\r\n        \"init\"  : function(/*Object*/data){\r\n            if (data) {\r\n                this._items = arrays.makeArray(data);\r\n            } else {\r\n                this._items =  [];\r\n            }\r\n        }\r\n        \r\n\r\n    });\r\n\r\n    return Set;\r\n});\r\n\n\r\ndefine('skylark-data-collection/Stack',[\r\n    \"./collections\",\r\n\t\"./List\"\r\n],function(collections,List) {\r\n\r\n\tvar Stack = collections.Stack = List.inhert({\r\n\t\t\"klassName\"\t:\t\"Stack\",\r\n\r\n\t\t\"clone\" : function() {\r\n\t\t\t//desc : \"Returns a shallow copy of this Stack instance. (The items themselves are not copied.)\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Stack, desc : \"a clone of this Stack instance.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\t\t\tvar items = this._getInnerItems();\r\n\t\t\treturn new Stack(items)\r\n\t\t},\r\n\r\n        \"peek\" : function() {\r\n            //desc : \"Returns the item object at the top of the Queue without removing it.\",\r\n            //result    :   {\r\n            //  type : Object, desc : \"The Item Object at the top of the Queue.\"\r\n            //},\r\n            //params : [\r\n            //],\r\n\r\n            var items = this._getInnerItems(),\r\n                lastIndex = items.length-1;\r\n            if(lastIndex > -1 ) {\r\n                return items[lastIndex];\r\n            }\r\n            return null;\r\n        },\r\n\r\n\t\t\"pop\" : function() {\r\n\t\t\t//desc : \"Returns the item object at the top of the Stack and  removes it.\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"The Item Object at the top of the Stack.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\t\t\tvar items = this._getInnerItems(),\r\n\t\t\t\titem = null;\r\n\t\t\tif( items.length > 0 ) {\r\n\t\t\t\titem = items.pop();\r\n\t            this.trigger(\"changed:pop\",{\r\n\t                \"data\" :  item\r\n\t            });\t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t},\r\n\r\n\t\t\"push\" : function(/*Object*/item) {\r\n\t\t\t//desc : \"Inserts an item object at the top of the Stack.\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"Returns this Stack for chain call.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//\t{name: \"item\", type: Object, desc: \"The Item Object to push onto the Stack.\\nThe item can be null.\"}\r\n\t\t\t//],\r\n\r\n\t\t\tvar items = this._getInnerItems();\r\n\t\t\titems.push(item);\r\n            this.trigger(\"changed:push\",{\r\n                \"data\" :  item\r\n            });\t\t\t\t\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn Stack;\r\n\r\n});\r\n\n\r\ndefine('skylark-data-collection/TreeItem',[\r\n    \"skylark-langx/arrays\",\r\n    \"skylark-langx/Evented\",\r\n    \"./collections\"\r\n], function(arrays, Evented, collections) {\r\n\r\n    var TreeItem = collections.TreeItem = Evented.inherit({\r\n\r\n        \"klassName\": \"TreeItem\",\r\n        \r\n        \"_internalChildren\": function(copy) {\r\n            var children = this._.children;\r\n            if (copy) {\r\n                return arrays.makeArray(children);\r\n            } else {\r\n                return children;\r\n            }\r\n        },\r\n\r\n        \"_checkPublicOperation\" : function(name) {\r\n            return true;\r\n        },\r\n\r\n        \"_internalSetParent\": function(parent) {\r\n            this._.parent = parent;\r\n        },\r\n\r\n        \"_internalAddChild\": function(item, at) {\r\n            var child = this._internalCreateItem(item),\r\n                children = this._internalChildren();\r\n            if (children) {\r\n                if (at === undefined) {\r\n                    children.push(child);\r\n                } else {\r\n                    children.insert(at, child);\r\n                }\r\n            }\r\n            child._internalSetParent(this);\r\n\r\n            return child;\r\n        },\r\n\r\n        \"_internalRemoveChildAt\": function(at) {\r\n            var children = this._internalChildren();\r\n            var child = children.splice(at,1);\r\n            child._internalSetParent(null);\r\n        },\r\n\r\n        \"_internalClearChildren\": function() {\r\n            var children = this._internalChildren();\r\n            if (children) {\r\n                for (var i = 0; i < children.length; i++) {\r\n                    children[i]._internalSetParent(null);\r\n                }\r\n                children.length = 0;\r\n            }\r\n        },\r\n\r\n        \"_internalCreateItem\": function(data) {\r\n            var root = this.root,\r\n                item = root ? root.createItem(data) : data;\r\n\r\n            return item;\r\n        },\r\n        \r\n        \"name\": {\r\n            //\"type\": String\r\n            get : function() {\r\n                return this._.name;\r\n            }\r\n        },\r\n\r\n        \"data\": {\r\n            //\"type\": Object\r\n            get : function() {\r\n                return this._.data;\r\n            }\r\n        },\r\n\r\n        \"children\": {\r\n            type: Array,\r\n            getter: function() {\r\n                return this._internalChildren(true);\r\n            }\r\n        },\r\n\r\n        \"firstChild\": {\r\n            //desc: \"Gets the first child tree item in the tree item collection.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var children = this._internalChildren();\r\n                return children && children[0];\r\n            }\r\n        },\r\n\r\n        \"fullPath\": {\r\n            //desc: \"Gets the path from the root tree item to the current tree item.\",\r\n            //type: String,\r\n            get: function() {\r\n                var path = this.name,\r\n                    parent = this.parent;\r\n                while (parent) {\r\n                    path = parent.name + \"/\" + path;\r\n                    parent = parent.parent;\r\n                }\r\n                return path;\r\n            }\r\n        },\r\n\r\n        \"lastChild\": {\r\n            //desc: \"Gets the last child tree item in the tree item collection\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var children = this._internalChildren();\r\n                return children && children[children.length - 1];\r\n            }\r\n        },\r\n\r\n        \"lastDescendants\": {\r\n            //desc: \"Gets the last descendants tree item in the tree item collection\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var last = this.lastChild,\r\n                    lastChild = last.lastChild;\r\n                while (lastChild) {\r\n                    last = lastChild;\r\n                    lastChild = last.lastChild;\r\n                }\r\n                return last;\r\n            }\r\n        },\r\n\r\n        \"level\": {\r\n            //desc: \"Gets the zero-based depth of the tree item in the Tree.\\nFor the Level property, the root node is considered the first level of nesting and returns 0.\",\r\n            //type: Number,\r\n            get: function() {\r\n                var result = 0,\r\n                    item = this.parent;\r\n                while (item) {\r\n                    result++;\r\n                    item = item.parent;\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n\r\n        \"next\": {\r\n            //desc: \"Gets the next tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var nextItem = this.firstChild;\r\n                if (!nextItem) {\r\n                    var item = this,\r\n                        parent = item.parent;\r\n                    while (parent) {\r\n                        nextItem = parent.getNextChild(item);\r\n                        if (nextItem) {\r\n                            break;\r\n                        }\r\n                        item = parent;\r\n                        parent = item.parent;\r\n                    }\r\n                }\r\n                return nextItem;\r\n            }\r\n        },\r\n\r\n        \"nextSibling\": {\r\n            //desc: \"Gets the next sibling tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var parent = this.parent;\r\n                return parent && parent.getNextChild(this);\r\n            }\r\n        },\r\n\r\n        \"parent\": {\r\n            //desc: \"Gets the parent tree item of the current tree item.\",\r\n            //type: TreeItem\r\n            get : function(){\r\n                return this._.parent;\r\n            }\r\n        },\r\n\r\n        \"prev\": {\r\n            //desc: \"Gets the previous tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var prevSibling = this.prevSibling,\r\n                    prevItem;\r\n                if (prevSibling) {\r\n                    prevItem = prevSibling.lastDescendants;\r\n                    if (!prevItem) {\r\n                        prevItem = prevSibling;\r\n                    }\r\n                } else {\r\n                    prevItem = this.parent;\r\n                }\r\n\r\n                return prevItem;\r\n            }\r\n        },\r\n\r\n        \"prevSibling\": {\r\n            //desc: \"Gets the previous sibling tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var parent = this.parent;\r\n                return parent && parent.getPrevChild(this);\r\n            }\r\n        },\r\n\r\n        \"root\": {\r\n            //desc: \"Gets the tree that the tree item is assigned to.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var r = this;\r\n                while (r.parent) {\r\n                    r = r.parent;\r\n                }\r\n                return r;\r\n            }\r\n        },\r\n        /*\r\n         *\r\n         *@method prepend a child item.\r\n         *@return TreeItem\r\n         */\r\n        \"prependChild\": function( /*Object*/ item) {\r\n            return this.addChild(item, 0);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method add a Child item\r\n         *@return TreeItem\r\n         */\r\n        \"addChild\": function( /*Object*/ item, at) {\r\n            this._checkPublicOperation(\"addChild\");\r\n            var child = this._internalAddChild(item, at);\r\n\r\n            this.trigger(\"changed:addChild\",{\r\n                \"data\" :  [\r\n                    { \"item\" : child, \"index\": at, isSingle: true}\r\n                ]\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method addChildLast\r\n         *@return TreeItem\r\n         */\r\n        \"appendChild\": function( /*Object*/ item) {\r\n            return this.addChild(this);\r\n        },\r\n\r\n        \"canHaveChildren\": function() {\r\n            var children = this._internalChildren();\r\n            return children !== undefined;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return Number\r\n         */\r\n        \"childrenCount\": function() {\r\n            var children = this._internalChildren();\r\n            return children ? children.length : 0;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method clearChildren\r\n         *@return\r\n         */\r\n        \"clearChildren\": function() {\r\n            this._checkPublicOperation(\"clearChildren\");\r\n            this._internalClearChildren();\r\n\r\n            this.trigger(\"changed:clearChildren\");                    \r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getChildAt\r\n         *@return TreeItem\r\n         */\r\n        \"getChildAt\": function( /*Number*/ index) {\r\n            var children = this._internalChildren();\r\n            return children[index];\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getChildren\r\n         *@return Array\r\n         */\r\n        \"getChildren\": function() {\r\n            return this.children;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getPrevChild\r\n         *@return TreeItem\r\n         */\r\n        \"getPrevChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren(),\r\n                idx = children.indexOf(child);\r\n            if (idx > 0) {\r\n                return children[idx - 1];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getNextChild\r\n         *@return TreeItem\r\n         */\r\n        \"getNextChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren(),\r\n                idx = children.indexOf(child);\r\n            if (idx >= 0 && idx < children.length - 1) {\r\n                return children[idx + 1];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         *@method hasChildren\r\n         *@return {Boolean}\r\n         *  true  if this node has children.\r\n         */\r\n        \"hasChildren\": function() {\r\n            var children = this._internalChildren();\r\n            return children && children.length > 0;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"indexOfChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren();\r\n            return children.indexOf(child);\r\n        },\r\n\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"insertChild\": function( /*Object*/ data, /*Number*/ index) {\r\n            return this.addChild(item, index);\r\n        },\r\n\r\n        parents : function() {\r\n            var r = [],\r\n                p = this.parent;\r\n            while (p) {\r\n                r.push(p);\r\n                p = p.parent;\r\n            }\r\n            return r;\r\n        },\r\n\r\n        /*\r\n         *Removes the current tree item from the tree.\r\n         *@method remove\r\n         */\r\n        \"remove\": function() {\r\n            var parent = this.parent;\r\n            if (parent) {\r\n                parent.removeChild(this);\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method removeChild\r\n         *@return TreeItem\r\n         */\r\n        \"removeChild\": function( /*TreeItem*/ child) {\r\n            var at = this.indexOfChild(child);\r\n            if (at>-1) {\r\n                return this.removeChildAt(at);\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"removeChildAt\": function( /*Number*/ at) {\r\n            this._checkPublicOperation(\"removeChild\");\r\n\r\n            this._internalRemoveChildAt(at);\r\n\r\n            this.trigger(\"changed:removeChild\",{\r\n                \"data\" : [\r\n                    { \"item\" : item, \"index\" : at}\r\n                ]\r\n            });\r\n        },\r\n\r\n        \"init\"  :   function(data){\r\n            var _ = this._ = {};\r\n            _.data = data;\r\n            _.name = data.name;\r\n            _.children = [];\r\n        }\r\n        \r\n    });\r\n\r\n    return TreeItem;\r\n});\r\n\n\r\ndefine('skylark-data-collection/Tree',[\r\n    \"./collections\",\r\n\t\"./Collection\",\r\n\t\"./ArrayList\",\r\n\t\"./TreeItem\"\r\n],function(collections,Collection,ArrayList,TreeItem){\r\n\r\n\r\n\tvar Tree = collections.Tree = Collection.inherit({\r\n\r\n\t\t/*\r\n\t\t *@method createNode\r\n\t\t *@return {TreeNode}\r\n\t\t */\r\n\t\t\"createItem\"\t:\tfunction(/*Object*/data){\r\n\t\t\treturn new Tree.TreeItem(data);\r\n\r\n\t\t},\r\n\r\n\t\t\"items\" : {\r\n\t\t\t//type : Array,\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.toArray();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n        \"iterator\" : function() {\r\n            var nextItem = this.firstItem();\r\n            return {\r\n                hasNext : function() {\r\n                    return nextItem;\r\n                },\r\n                next : function() {\r\n                \tif (nextItem) {\r\n\t                \tvar ret = nextItem;\r\n\t                \tnextItem = ret.next;\r\n\t                    return ret ;\r\n                \t}\r\n                }\r\n            }\r\n        },\r\n\r\n\t\t/*\r\n\t\t *@method count\r\n\t\t *@return {Number}\r\n\t\t */\r\n\t\tcount : /*Number*/function () {\r\n\t\t\tvar c = 0;\r\n\t\t\tthis.forEach(function(item){\r\n\t\t\t\tc+=1;\r\n\t\t\t});\r\n        \treturn c;\r\n        },\r\n\r\n        firstItem : function() {\r\n        \tvar children = this._.children;\r\n        \tif (children && children.length) {\r\n        \t\treturn children[0];\r\n        \t} else {\r\n        \t\treturn null;\r\n        \t}\r\n        },\r\n\r\n        lastItem : function() {\r\n        \tvar last = function(item,noself) {\r\n        \t\tvar children = item.children;\r\n        \t\tif (children && children.length) {\r\n        \t\t\treturn last(children[children.length-1],false);\r\n        \t\t} else {\r\n        \t\t\treturn noself ? null : item;\r\n        \t\t}\r\n        \t}\r\n        \treturn last(item,true)\r\n        },\r\n\r\n\t\t\"init\"\t:\tfunction() {\r\n\t\t\tthis._.children = [];\r\n\t\t}\r\n\t});\r\n\r\n\tTree.TreeItem = TreeItem;\r\n\r\n\treturn Tree;\r\n\r\n});\r\n\ndefine('skylark-data-collection/main',[\r\n\t\"./collections\",\r\n\t\"./Collection\",\r\n\t\"./List\",\r\n\t\"./Map\",\r\n\t\"./ArrayList\",\r\n\t\"./PagedList\",\r\n\t\"./Queue\",\r\n\t\"./Set\",\t\r\n\t\"./Stack\",\t\r\n\t\"./Tree\",\r\n\t\"./TreeItem\"\r\n],function(collections){\r\n\treturn collections;\r\n});\ndefine('skylark-data-collection', ['skylark-data-collection/main'], function (main) { return main; });\n\n"]}