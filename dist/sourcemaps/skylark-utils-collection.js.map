{"version":3,"sources":["skylark-utils-collection.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","skylarkjs","skylark","collections","Evented","Collection","inherit","klassName","_clear","clear","this","trigger","count","c","it","iterator","hasNext","func","thisArg","item","next","call","toArray","items","arrays","List","_getInnerItems","_items","contains","indexOf","getAll","get","index","getRange","a1","Math","max","init","data","makeArray","Map","_findKeyByRegExp","regExp","callback","filter","key","match","strKey","silent","set","value","oldValue","updated","name","remove","idx","findByRegExp","self","removeByRegExp","toPlain","plain","toString","delim","ArrayList","add","isSingle","addRange","toAdd","clone","_","insert","splice","insertRange","removeFirstMatch","len","removeAt","toRemove","Array","removeRange","removed","setByIndex","old","oldItem","reset","newItems","reverse","sort","fn","types","Deferred","PagedList","_options","_cachePageData","pageNo","pageItems","pages","_pages","oldLen","_count","pageSize","OldLen","oldCount","_getPageData","_laodPageData","loadData","from","deferred","then","resolve","err","reject","promise","_pageSize","totalCount","_endless","Infinity","totalPageCount","ceil","pageCount","hasMore","loadMore","getPage","autoLoad","fetchPage","when","options","Queue","dequeue","shift","enqueue","Set","difference","setB","result","exclude","include","intersection","isSubSet","isSuperSet","union","setA","Stack","inhert","peek","lastIndex","TreeItem","_internalChildren","copy","children","_checkPublicOperation","_internalSetParent","parent","_internalAddChild","at","child","_internalCreateItem","undefined","_internalRemoveChildAt","_internalClearChildren","root","createItem","type","getter","firstChild","fullPath","path","lastChild","lastDescendants","last","level","nextItem","getNextChild","nextSibling","prev","prevItem","prevSibling","getPrevChild","r","prependChild","addChild","appendChild","canHaveChildren","childrenCount","clearChildren","getChildAt","getChildren","hasChildren","indexOfChild","insertChild","parents","p","removeChild","removeChildAt","Tree","firstItem","ret","lastItem","noself","main"],"mappings":"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","file":"../skylark-utils-collection.js","sourcesContent":["define('skylark-utils-collection/collections',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.collections = {};\r\n});\ndefine('skylark-utils-collection/Collection',[\r\n    \"skylark-langx/Evented\",\r\n    \"./collections\"\r\n], function(Evented, collections) {\r\n\r\n    var Collection = collections.Collection = Evented.inherit({\r\n\r\n        \"klassName\": \"Collection\",\r\n\r\n        _clear: function() {\r\n            throw new Error('Unimplemented API');\r\n        },\r\n\r\n        \"clear\": function() {\r\n            //desc: \"Removes all items from the Collection\",\r\n            //result: {\r\n            //    type: Collection,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [],\r\n            this._clear();\r\n            this.trigger(\"changed:clear\");\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *@method count\r\n         *@return {Number}\r\n         */\r\n        count : /*Number*/function () {\r\n            var c = 0,\r\n                it = this.iterator();\r\n            while(!it.hasNext()){\r\n                c++;\r\n            }\r\n            return c;\r\n        },\r\n\r\n        \"forEach\": function( /*Function*/ func, /*Object?*/ thisArg) {\r\n            //desc: \"Executes a provided callback function once per collection item.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"the number of items\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"func\",\r\n            //    type: Function,\r\n            //    desc: \"Function to execute for each element.\"\r\n            //}, {\r\n            //    name: \"thisArg\",\r\n            //    type: Object,\r\n            //    desc: \"Value to use as this when executing callback.\"\r\n            //}],\r\n            var it = this.iterator();\r\n            while(!it.hasNext()){\r\n                var item = it.next();\r\n                func.call(thisArg || item,item);\r\n            }\r\n            return this;\r\n\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            throw new Error('Unimplemented API');\r\n        },\r\n\r\n        \"toArray\": function() {\r\n            //desc: \"Returns an array containing all of the items in this collection in proper sequence (from first to last item).\",\r\n            //result: {\r\n            //    type: Array,\r\n            //    desc: \"an array containing all of the elements in this collection in proper sequence\"\r\n            //},\r\n            //params: [],\r\n            var items = [],\r\n                it = this.iterator();\r\n            while(!it.hasNext()){\r\n                items.push(it.next());\r\n            }\r\n            return items;\r\n        }\r\n    });\r\n\r\n    return Collection;\r\n});\r\n\ndefine('skylark-utils-collection/List',[\r\n    \"skylark-langx/arrays\",\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function(arrays,collections, Collection) {\r\n\r\n    var List = collections.List = Collection.inherit({\r\n        \r\n        \"klassName\": \"List\",\r\n\r\n\r\n        _getInnerItems : function() {\r\n            return this._items;\r\n        },\r\n\r\n        _clear : function() {\r\n            this._items = [];\r\n        },\r\n\r\n        \"contains\": function( /*Object*/ item) {\r\n            //desc: \"Determines whether an item is in the Collection.\",\r\n            //result: {\r\n            //    type: Boolean,\r\n            //    desc: \"true if item is found in the Collection; otherwise, false.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to check.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            return items.indexOf(item) >= 0;\r\n        },\r\n\r\n        \"count\": function() {\r\n            //desc: \"Gets the number of items actually contained in the Collection.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"the number of items\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            return items.length;\r\n        },\r\n\r\n        \"getAll\": function() {\r\n            //desc: \"Returns all items.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"all items\"\r\n            //},\r\n            //params: [],\r\n            return this._getInnerItems();\r\n        },\r\n\r\n        \"get\": function(index) {\r\n            //desc: \"Returns the item at the specified position in the List.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"The item at the specified position.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"index of the element to return.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index >= items.length) {\r\n                throw new Error(\"Not exist:\" + index);\r\n            }\r\n            return items[index];\r\n        },\r\n\r\n        \"getRange\": function( /*Number*/ index, /*Number*/ count) {\r\n            //desc: \"Returns an Array which represents a subset of the items in the source list.\",\r\n            //result: {\r\n            //    type: Array,\r\n            //    desc: \"An Array which represents a subset of the items in the source list.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based list index at which the range starts.\"\r\n            //}, {\r\n            //    name: \"count\",\r\n            //    type: Number,\r\n            //    desc: \"The number of items in the range.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                a1 = [];\r\n            for (var i = Math.max(index, 0); i < count; i++) {\r\n                if (i >= items.length) {\r\n                    break;\r\n                }\r\n                a1.push(items[i]);\r\n            }\r\n            return a1;\r\n        },\r\n\r\n        \"indexOf\": function( /*Object*/ item) {\r\n            //desc: \"Searches for the specified Object and returns the zero-based index of the first occurrence within the entire list.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the first occurrence of value within the entire list,if found; otherwise, -1.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The Object to locate in the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            return items.indexOf(item);\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    return this._items[i++];\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n         *@params {Object}args\r\n         *  a plain object for the initialize arguments.\r\n         */\r\n        init :  function(/*Array*/data){\r\n            if (data) {\r\n                this._items = arrays.makeArray(data);\r\n            } else {\r\n                this._items =  [];\r\n            }\r\n        }\r\n    });\r\n\r\n    return List;\r\n});\r\n\n\r\ndefine('skylark-utils-collection/Map',[\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function( collections, Collection) {\r\n\r\n    var Map = collections.Map = Collection.inherit({\r\n\r\n        \"klassName\": \"Map\",\r\n\r\n        _getInnerItems : function() {\r\n            return this._items;\r\n        },\r\n\r\n        _clear : function() {\r\n            this._items = [];\r\n        },\r\n\r\n        _findKeyByRegExp: function(regExp, callback) {\r\n            var items = this._getInnerItems();\r\n            return items.filter(function(key) {\r\n                if (key.match(regExp)) {\r\n                    if (callback) callback(key);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n\r\n        \"get\":  function(strKey, silent) {\r\n            //desc: \"Returns the item at the specified key in the Hashtable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"The item at the specified key.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key of the item to return.\"\r\n            //}, {\r\n            //    name: \"silent\",\r\n            //    type: Boolean,\r\n            //    desc: \"the silent flag.\",\r\n            //    optional: true\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            /*\r\n            if (!silent && !this.contains(strKey)) {\r\n                throw \"hash key is not  existed\";\r\n            }\r\n            */\r\n            var items = this._getInnerItems();\r\n            return items[strKey];\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    var key =  this._items[i++];\r\n                    return [this._items[key],key];\r\n                }\r\n            }\r\n        },\r\n\r\n        \"set\": function( /*String*/ strKey, /*Object*/ value) {\r\n            //desc: \"Replaces the item at the specified key in the Hashtable with the specified item.\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"key of the item to replace.\"\r\n            //}, {\r\n            //    name: \"value\",\r\n            //    type: Object,\r\n            //    desc: \"item to be stored at the specified position.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n\r\n            /*\r\n            if (!this.contains(strKey)) {\r\n                throw \"hash key is not existed\";\r\n            }\r\n            */\r\n\r\n            var items = this._getInnerItems();\r\n            if (items.indexOf(strKey) == -1) {\r\n                items.push(strKey);\r\n            }\r\n            var oldValue = items[strKey];\r\n            if (oldValue !== value) {\r\n                items[strKey] = value;\r\n                var updated = {};\r\n                updated[strKey] = {\r\n                    name : strKey,\r\n                    value : value,\r\n                    oldValue : oldValue\r\n                };\r\n                this.trigger(\"changed\" ,{ //TODO: \"changed:\"+ strKey\r\n                    data : updated\r\n                });\r\n            }\r\n            return this;\r\n        },\r\n\r\n\r\n        \"remove\": function( /*String*/ strKey) {\r\n            //desc: \"Removes the first occurrence of a specific item from the Hashtable\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            var items = this._getInnerItems();\r\n            var idx = items.indexOf(strKey);\r\n            if (idx >= 0) {\r\n                delete items[strKey];\r\n                delete items[idx];\r\n            }\r\n        },\r\n\r\n        findByRegExp: function( /*String*/ regExp, callback) {\r\n            //desc: \"find regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}, {\r\n            //    name: \"callback\",\r\n            //    type: Function,\r\n            //    desc: \"the callback method\"\r\n            //}],\r\n            var items = [],\r\n                self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                var item = self.get(key);\r\n                if (callback) callback(item);\r\n                items.push(item);\r\n            });\r\n            return items;\r\n        },\r\n\r\n        removeByRegExp: function( /*String*/ regExp) {\r\n            //desc: \"Removes regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            var self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                self.remove(key);\r\n            });\r\n        },\r\n\r\n        \"toPlain\": function() {\r\n            //desc: \"Returns a plain object containing all of the items in this Hashable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"a plain object containing all of the items in this Hashtable.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems(); \r\n\r\n            for (var i = 0; i < items.length; i++) {\r\n                var key = items[i];\r\n                plain[key] = items[key];\r\n            }\r\n            return plain;\r\n        },\r\n\r\n        \"toString\": function( /*String?*/ delim) {\r\n            //desc: \"implementation of toString, follows [].toString().\",\r\n            //result: {\r\n            //    type: String,\r\n            //   desc: \"The string.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"delim\",\r\n            //    type: String,\r\n            //    desc: \"The delim \",\r\n            //    optional: true\r\n            //}],\r\n            var items = this._getInnerItems();\r\n\r\n            return items.join((delim || \",\"));\r\n        },\r\n\r\n        \"init\": function( /*Object*/ data) {\r\n            var items = this._items = [];\r\n            for (var name in data) {\r\n                items.push(name);\r\n                items[name]= data[name];\r\n            }\r\n        }\r\n       \r\n    });\r\n    return Map;\r\n});\r\n\ndefine('skylark-utils-collection/ArrayList',[\r\n    \"./collections\",\r\n    \"./List\"\r\n], function(collections, List) {\r\n\r\n    var ArrayList = collections.ArrayList = List.inherit({\r\n        \r\n        \"klassName\": \"ArrayList\",\r\n\r\n        \"add\": function(item) {\r\n            //desc: \"Adds an item to the end of the List.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to be added to the end of the List. \\nThe item can be null.\"\r\n            //}],\r\n\r\n            var items = this._getInnerItems();\r\n            items.push(item);\r\n            this.trigger(\"changed:add\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\": items.length - 1, isSingle: true}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"addRange\": function( /*Collection*/ c) {\r\n            //desc: \"Adds the items of a collection into the List at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"c\",\r\n            //    type: [Collection, Array],\r\n            //    desc: \"The Collection whose items should be added into the List.\\nThe collection itself cannot be null, but it can contain items that are null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            var a1 = c.toArray ? c.toArray() : c,\r\n                toAdd = [];\r\n            for (var i = 0; i < a1.length; i++) {\r\n                items.push(a1[i]);\r\n                toAdd.push({\r\n                    \"item\" : a1[i],\r\n                    \"index\" : items.length-1\r\n                });\r\n            }\r\n            this.trigger(\"changed:add\",{\r\n                \"data\" :  toAdd\r\n            });\r\n            return this;\r\n        },\r\n\r\n\r\n        \"clone\": function() {\r\n            //desc: \"Returns a shallow copy of this ArrayList instance. (The items themselves are not copied.)\",\r\n            //result: {\r\n            //    type: ArrayList,\r\n            //   desc: \"a clone of this ArrayList instance.\"\r\n            //},\r\n            //params: [],\r\n\r\n           return new ArrayList({\r\n                \"items\": this._.items\r\n            });\r\n        },\r\n\r\n        \"insert\": function( /*Number*/ index, /*Object*/ item) {\r\n            //desc: \"Inserts an item into the list at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index at which the new item should be inserted.\"\r\n            //}, {\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to insert. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index > items.length) {\r\n                throw new Error(\"invalid parameter!\");\r\n            }\r\n            items.splice(index, 0, item);\r\n            this.trigger(\"changed\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\" : index}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"insertRange\": function( /*Number*/ index, /*Collection*/ c) {\r\n            //desc: \"Inserts the items of a collection into the list at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index at which the new item should be inserted.\"\r\n            //}, {\r\n            //    name: \"c\",\r\n            //    type: Collection,\r\n            //    desc: \"The Collection whose items should be inserted into the ArrayList. \\nThe collection itself cannot be null, but it can contain items that are null. \"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toAdd = [];\r\n            if (index < 0 || index >= items.length) {\r\n                throw new Error(\"invalid parameter!\");\r\n            }\r\n            var a1 = c.toArray();\r\n            for (var i = 0; i<a1.length - 1; i++) {\r\n                items.splice(index+i, 0, a1[i]);\r\n                toAdd.push({\r\n                    \"item\" : a1[i],\r\n                    \"index\" : index+i\r\n                });\r\n            }\r\n            this.trigger(\"changed:insert\",{\r\n                \"data\" :  toAdd\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeFirstMatch\": function( /*Object*/ item) {\r\n            //desc: \"Removes the first occurrence of a specific item from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to remove from the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            for (var i = 0, len = items.length; i < len; i++) {\r\n                if (items[i] === item) {\r\n                    this.removeAt(i);\r\n                    break;\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        \"remove\": function( /*Object*/ item) {\r\n            //desc: \"Removes the all occurrence of a specific item from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to remove from the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toRemove = [];\r\n            for (var i = 0, len = items.length; i < len; i++) {\r\n                if (items[i] === item) {\r\n                    Array.removeAt(items, i);\r\n                    toRemove.push({\r\n                        \"item\" : item,\r\n                        \"index\" : i\r\n                    });\r\n                }\r\n            }\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" :  toRemove\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeAt\": function(index) {\r\n            //desc: \"Removes the item at the specified index of the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the item to remove.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                item = items.splice(index, 1)[0];\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\" : index}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeRange\": function( /*Number*/ index, /*Number*/ count) {\r\n            //desc: \"Removes a range of items from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the item to remove.\"\r\n            //}, {\r\n            //    name: \"count\",\r\n            //    type: Number,\r\n            //    desc: \"The number of items to remove.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toRemove = [];\r\n\r\n            for (var i = index; i<index+count;i++) {\r\n                toRemove.push({\r\n                    \"item\" : items[i],\r\n                    \"index\" : i\r\n                });\r\n            }\r\n            items.splice(index, count);\r\n\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" : {\r\n                    \"removed\" : toRemove\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"setByIndex\": function( /*Number*/ index, /*Item*/ item) {\r\n            //desc: \"Replaces the item at the specified position in the list with the specified item.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"index of the item to replace.\"\r\n            //}, {\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"item to be stored at the specified position.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index >= items.length) throw new Error(\"\" + i);\r\n            var old = items[index];\r\n            items[i] = item;\r\n\r\n            this.trigger(\"changed:update\",{\r\n                \"data\" : [\r\n                    { \"item\" : item, \"index\" : index,\"oldItem\":old}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"reset\": function(newItems) {\r\n            //desc: \"Reset the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            items.length = 0;\r\n            for (var i=0;i<newItems.length;i++){\r\n                items.push(newItems[i]);\r\n            }\r\n            this.trigger(\"changed:reset\");\r\n\r\n            return this;\r\n        },\r\n        \r\n        \"reverse\": function() {\r\n            //desc: \"Reverse the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            items.reverse();\r\n\r\n            this.trigger(\"changed:reverse\");\r\n            return this;\r\n        },\r\n\r\n        \"sort\": function( /*Function?*/ fn) {\r\n            //desc: \"sort the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"fn\",\r\n            //    type: Function,\r\n            //    desc: \"The function for sort\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (fn) {\r\n                items.sort(fn);\r\n            } else {\r\n                items.sort();\r\n            }\r\n            this.trigger(\"changed:sort\");\r\n            return this;\r\n        }\r\n\r\n    });\r\n\r\n    return ArrayList;\r\n});\r\n\n\r\ndefine('skylark-utils-collection/PagedList',[\r\n    \"skylark-langx/types\",\r\n    \"skylark-langx/Deferred\",\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function(types, Deferred, collections, Collection) {\r\n    \r\n    var PagedList = collections.PagedList = Collection.inherit({\r\n\r\n        \"klassName\": \"PagedList\",   　\r\n\r\n        //{\r\n        //  provider : function(){},\r\n        //  totalCount : Infinity,  // the total count\r\n        //}\r\n        _options : null,\r\n\r\n        _cachePageData: function(pageNo, pageItems) {\r\n            var pages = this._pages,\r\n                oldLen = this._count,\r\n                len = (pageNo - 1) * this.pageSize + pageItems.length;\r\n\r\n            pages[pageNo] = pageItems;\r\n\r\n            this.trigger(\"changed:cache\",{\r\n                data : {\r\n                    pageNo : pageNo,\r\n                    pageItems : pageItems\r\n                }\r\n            })\r\n\r\n            if (len > OldLen) {\r\n                this._count = len;\r\n                this.trigger(\"changed:count\",{\r\n                    data : {\r\n                        count : len,\r\n                        oldCount : oldLen\r\n                    }\r\n                })\r\n            }\r\n        },\r\n\r\n        _getPageData: function(pageNo) {\r\n            var items = this._getInnerItems(),\r\n                pageItems = [],\r\n                pageSize = this.pageSize,\r\n                idx = (pageNo - 1) * pageSize,\r\n                len = items.length;\r\n\r\n            for (var i = 0; i < pageSize && idx < len; i++, idx++) {\r\n                if (items[idx]) pageItems.push(items[idx]);\r\n            }\r\n            return pageItems;\r\n        },\r\n\r\n        \"_laodPageData\": function( /*Number*/ pageNo) {\r\n            //desc: \"Get a page at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this page for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"pageNo\",\r\n            //    type: Number,\r\n            //}],\r\n            var loadData = this._options.loadData;\r\n            pageSize = this.pageSize,\r\n                from = (pageNo - 1) * pageSize;\r\n            deferred = new Deferred(),\r\n                self = this;\r\n            loadData(from, pageSize).then(function(items) {\r\n                self._cachePageData(pageNo, items);\r\n                deferred.resolve(items);\r\n            }, function(err) {\r\n                deferred.reject(err);\r\n            })\r\n\r\n            return deferred.promise;\r\n\r\n        },\r\n\r\n        \"pageSize\": {\r\n            \"get\": function() {\r\n                return this._pageSize;\r\n            }\r\n        },\r\n\r\n        \"totalCount\": {\r\n            //\"desc\": \"the total count\",\r\n            //\"type\": Number,\r\n            //\"defaultValue\": Infinity\r\n            get : function() {\r\n                return this._options && (this._endless._options || Infinity);\r\n            }\r\n        },\r\n\r\n\r\n        \"totalPageCount\": {\r\n            \"get\": function() {\r\n                return Math.ceil(this.totalCount / this.pageSize);\r\n            }\r\n        },\r\n\r\n        \"count\": {\r\n            //\"desc\": \"the total count\",\r\n            //\"type\": Number,\r\n            //\"defaultValue\": Infinity\r\n            get : function() {\r\n                return this._count;\r\n            }\r\n        },\r\n\r\n        \"pageCount\": {\r\n            \"get\": function() {\r\n                return Math.ceil(this.count / this.pageSize);\r\n            }\r\n        },\r\n\r\n\r\n        \"hasMore\": function() {\r\n            //desc: \"determine if the list has more items\",\r\n            //result: {\r\n            //    type: Boolean,\r\n            //    desc: \"false if reached the end\"\r\n            //},\r\n            //params: [],\r\n            return this.count < this.totalCount;\r\n        },\r\n\r\n        \"loadMore\": function() {\r\n            //desc: \"load more data.\",\r\n            //result: {\r\n            //    type: Promise,\r\n            //    desc: \"deferred object\"\r\n            //},\r\n            //params: [{\r\n            //}],\r\n\r\n           return this._laodPageData(this.pageCount);\r\n           \r\n        },\r\n\r\n\r\n        \"getPage\": function( /*Number*/ pageNo,autoLoad) {\r\n            //desc: \"Get a page at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this page for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"pageNo\",\r\n            //    type: Number,\r\n            //}],\r\n            return  this._getPageData(pageNo);\r\n        },\r\n\r\n        fetchPage: function(pageNo) {\r\n            var pageItems = this._getPageData(pageNo);\r\n            if (!pageItems) {\r\n                return this._laodPageData(pageNo);\r\n            } else {\r\n                return Deferred.when(items);\r\n            }\r\n        },\r\n\r\n        \"init\"    :   function(pageSize,options){\r\n            this._pages = {};\r\n            this._count = 0;\r\n            \r\n            this._options =options;\r\n        }\r\n\r\n    });\r\n\r\n    return PagedList;\r\n});\r\n\n\r\ndefine('skylark-utils-collection/Queue',[\r\n    \"./collections\",\r\n\t\"./List\"\r\n],function(collections,List) {\r\n\r\n\tvar Queue = collections.Queue = List.inherit({\r\n\t\t\r\n\t\t\"klassName\"\t:\t\"Queue\",\r\n\r\n\t\t\"clone\" :  function(item) {\r\n\t\t\t//desc : \"Returns a shallow copy of this Queue instance. (The items themselves are not copied.)\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Queue, desc : \"a clone of this Queue instance.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\t\t\tvar items = this._getInnerItems();\r\n\t\t\treturn new Queue({\r\n\t\t\t\t\"items\"\t:\titems\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t\"dequeue\" : function() {\r\n\t\t\t//desc : \"Shift the first element off the queue and return it\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"The first element of the Queue.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\r\n\t\t\tvar items = this._getInnerItems(),\r\n\t\t\t\titem = items.shift();\r\n\r\n            this.trigger(\"changed:dequeue\",{\r\n                \"data\" :  item\r\n            });\r\n\t\t\t\r\n\t\t\treturn item;\r\n\t\t},\r\n\r\n\t\t\"enqueue\" : function(item) {\r\n\t\t\t//desc : \"Puts the passed object at the end of the queue\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"Returns this Queue for chain call.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//\t{name: \"item\", type: Object, desc: \"The Item Object to push onto the Stack.\\nThe item can be null.\"}\r\n\t\t\t//],\r\n\r\n\t\t\tvar items = this._getInnerItems();\r\n\r\n\t\t\titems.push(item);\r\n\r\n            this.trigger(\"changed:enqueue\",{\r\n                \"data\" :  item\r\n            });\r\n\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn Queue;\r\n\r\n});\r\n\ndefine('skylark-utils-collection/Set',[\r\n    \"skylark-langx/arrays\",\r\n    \"./collections\",\r\n    \"./Collection\"\r\n], function(arrays,collections, Collection) {\r\n\r\n    var Set = collections.Set = Collection.inherit({\r\n\r\n        \"klassName\": \"Set\",\r\n\r\n        /*\r\n         *Returns a  copy of this Set instance. (The items themselves are not copied.)\r\n         *@method clone\r\n         *@return {Set}\r\n         *  a clone of this Set instance.\r\n         */\r\n        \"clone\" :   function(){\r\n            return new Set({\r\n                \"items\" :   this._.items\r\n            });\r\n        },\r\n\r\n        /*\r\n         *Returns everything in this set that is not in setB.\r\n         *@method intersection\r\n         */\r\n        difference : function(/*Set*/ setB){\r\n            var result = [];\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(!setB.contains(item)){\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return new Set(result);\r\n        },\r\n\r\n        exclude : function(/*Item*/item) {\r\n            var items = this._.items,\r\n                i = items.indexOf(item);\r\n            if (i>=0) {\r\n                items.splice(i,1);\r\n                this.trigger(\"changed:exclude\",{\r\n                    \"data\" :  [\r\n                        item\r\n                    ]\r\n                });\r\n            }\r\n        },\r\n\r\n        include : function(/*Item*/item){\r\n            var items = this._.items;\r\n            if (items.indexOf(item)<0) {\r\n                items.push(item);\r\n                this.trigger(\"changed:include\",{\r\n                    \"data\" :  [\r\n                        item\r\n                    ]\r\n                });\r\n            }\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    return this._items[i++];\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n         *Return the intersection of the set and passed set.\r\n         *@method intersection\r\n         */\r\n        intersection : function(/*Set*/ setB){\r\n            var result = [];\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(setB.contains(item)){\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return new Set(result);\r\n        },\r\n\r\n\r\n        /*\r\n         *Returns if set B is a subset of the set.\r\n         *@method isSubSet\r\n         */\r\n        isSubSet : function(/*Set*/ setB) {\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                var item=items[i];\r\n                if(!setB.contains(item)){\r\n                    return false;\r\n                }\r\n            }\r\n            return true;  \r\n        },\r\n\r\n        /*\r\n         *Returns if set B is a superset of the set.\r\n         *@method isSuperSet\r\n         */\r\n        isSuperSet : function(/*Set*/ setB){\r\n            return setB.isSubSet(this);\r\n        },\r\n\r\n        /*\r\n         *Return the union of the set and passed set.\r\n         *\r\n         */\r\n        union : function(/*Set*/ setA, /*Set*/ setB){\r\n            var result = setB.clone();\r\n            var items=this._getInnerItems();\r\n            for (var i = 0; i<items.length; i++) {\r\n                result.include(items[i]);\r\n            }\r\n            return result;  //\r\n        },\r\n\r\n        \"init\"  : function(/*Object*/data){\r\n            if (data) {\r\n                this._items = arrays.makeArray(data);\r\n            } else {\r\n                this._items =  [];\r\n            }\r\n        }\r\n        \r\n\r\n    });\r\n\r\n    return Set;\r\n});\r\n\n\r\ndefine('skylark-utils-collection/Stack',[\r\n    \"./collections\",\r\n\t\"./List\"\r\n],function(collections,List) {\r\n\r\n\tvar Stack = collections.Stack = List.inhert({\r\n\t\t\"klassName\"\t:\t\"Stack\",\r\n\r\n\t\t\"clone\" : function() {\r\n\t\t\t//desc : \"Returns a shallow copy of this Stack instance. (The items themselves are not copied.)\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Stack, desc : \"a clone of this Stack instance.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\t\t\tvar items = this._getInnerItems();\r\n\t\t\treturn new Stack(items)\r\n\t\t},\r\n\r\n        \"peek\" : function() {\r\n            //desc : \"Returns the item object at the top of the Queue without removing it.\",\r\n            //result    :   {\r\n            //  type : Object, desc : \"The Item Object at the top of the Queue.\"\r\n            //},\r\n            //params : [\r\n            //],\r\n\r\n            var items = this._getInnerItems(),\r\n                lastIndex = items.length-1;\r\n            if(lastIndex > -1 ) {\r\n                return items[lastIndex];\r\n            }\r\n            return null;\r\n        },\r\n\r\n\t\t\"pop\" : function() {\r\n\t\t\t//desc : \"Returns the item object at the top of the Stack and  removes it.\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"The Item Object at the top of the Stack.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//],\r\n\t\t\tvar items = this._getInnerItems(),\r\n\t\t\t\titem = null;\r\n\t\t\tif( items.length > 0 ) {\r\n\t\t\t\titem = items.pop();\r\n\t            this.trigger(\"changed:pop\",{\r\n\t                \"data\" :  item\r\n\t            });\t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn item;\r\n\t\t},\r\n\r\n\t\t\"push\" : function(/*Object*/item) {\r\n\t\t\t//desc : \"Inserts an item object at the top of the Stack.\",\r\n\t\t\t//result\t:\t{\r\n\t\t\t//\ttype : Object, desc : \"Returns this Stack for chain call.\"\r\n\t\t\t//},\r\n\t\t\t//params : [\r\n\t\t\t//\t{name: \"item\", type: Object, desc: \"The Item Object to push onto the Stack.\\nThe item can be null.\"}\r\n\t\t\t//],\r\n\r\n\t\t\tvar items = this._getInnerItems();\r\n\t\t\titems.push(item);\r\n            this.trigger(\"changed:push\",{\r\n                \"data\" :  item\r\n            });\t\t\t\t\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn Stack;\r\n\r\n});\r\n\n\r\ndefine('skylark-utils-collection/TreeItem',[\r\n    \"skylark-langx/arrays\",\r\n    \"skylark-langx/Evented\",\r\n    \"./collections\"\r\n], function(arrays, Evented, collections) {\r\n\r\n    var TreeItem = collections.TreeItem = Evented.inherit({\r\n\r\n        \"klassName\": \"TreeItem\",\r\n        \r\n        \"_internalChildren\": function(copy) {\r\n            var children = this._.children;\r\n            if (copy) {\r\n                return arrays.makeArray(children);\r\n            } else {\r\n                return children;\r\n            }\r\n        },\r\n\r\n        \"_checkPublicOperation\" : function(name) {\r\n            return true;\r\n        },\r\n\r\n        \"_internalSetParent\": function(parent) {\r\n            this._.parent = parent;\r\n        },\r\n\r\n        \"_internalAddChild\": function(item, at) {\r\n            var child = this._internalCreateItem(item),\r\n                children = this._internalChildren();\r\n            if (children) {\r\n                if (at === undefined) {\r\n                    children.push(child);\r\n                } else {\r\n                    children.insert(at, child);\r\n                }\r\n            }\r\n            child._internalSetParent(this);\r\n\r\n            return child;\r\n        },\r\n\r\n        \"_internalRemoveChildAt\": function(at) {\r\n            var children = this._internalChildren();\r\n            var child = children.splice(at,1);\r\n            child._internalSetParent(null);\r\n        },\r\n\r\n        \"_internalClearChildren\": function() {\r\n            var children = this._internalChildren();\r\n            if (children) {\r\n                for (var i = 0; i < children.length; i++) {\r\n                    children[i]._internalSetParent(null);\r\n                }\r\n                children.length = 0;\r\n            }\r\n        },\r\n\r\n        \"_internalCreateItem\": function(data) {\r\n            var root = this.root,\r\n                item = root ? root.createItem(data) : data;\r\n\r\n            return item;\r\n        },\r\n        \r\n        \"name\": {\r\n            //\"type\": String\r\n            get : function() {\r\n                return this._.name;\r\n            }\r\n        },\r\n\r\n        \"data\": {\r\n            //\"type\": Object\r\n            get : function() {\r\n                return this._.data;\r\n            }\r\n        },\r\n\r\n        \"children\": {\r\n            type: Array,\r\n            getter: function() {\r\n                return this._internalChildren(true);\r\n            }\r\n        },\r\n\r\n        \"firstChild\": {\r\n            //desc: \"Gets the first child tree item in the tree item collection.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var children = this._internalChildren();\r\n                return children && children[0];\r\n            }\r\n        },\r\n\r\n        \"fullPath\": {\r\n            //desc: \"Gets the path from the root tree item to the current tree item.\",\r\n            //type: String,\r\n            get: function() {\r\n                var path = this.name,\r\n                    parent = this.parent;\r\n                while (parent) {\r\n                    path = parent.name + \"/\" + path;\r\n                    parent = parent.parent;\r\n                }\r\n                return path;\r\n            }\r\n        },\r\n\r\n        \"lastChild\": {\r\n            //desc: \"Gets the last child tree item in the tree item collection\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var children = this._internalChildren();\r\n                return children && children[children.length - 1];\r\n            }\r\n        },\r\n\r\n        \"lastDescendants\": {\r\n            //desc: \"Gets the last descendants tree item in the tree item collection\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var last = this.lastChild,\r\n                    lastChild = last.lastChild;\r\n                while (lastChild) {\r\n                    last = lastChild;\r\n                    lastChild = last.lastChild;\r\n                }\r\n                return last;\r\n            }\r\n        },\r\n\r\n        \"level\": {\r\n            //desc: \"Gets the zero-based depth of the tree item in the Tree.\\nFor the Level property, the root node is considered the first level of nesting and returns 0.\",\r\n            //type: Number,\r\n            get: function() {\r\n                var result = 0,\r\n                    item = this.parent;\r\n                while (item) {\r\n                    result++;\r\n                    item = item.parent;\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n\r\n        \"next\": {\r\n            //desc: \"Gets the next tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var nextItem = this.firstChild;\r\n                if (!nextItem) {\r\n                    var item = this,\r\n                        parent = item.parent;\r\n                    while (parent) {\r\n                        nextItem = parent.getNextChild(item);\r\n                        if (nextItem) {\r\n                            break;\r\n                        }\r\n                        item = parent;\r\n                        parent = item.parent;\r\n                    }\r\n                }\r\n                return nextItem;\r\n            }\r\n        },\r\n\r\n        \"nextSibling\": {\r\n            //desc: \"Gets the next sibling tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var parent = this.parent;\r\n                return parent && parent.getNextChild(this);\r\n            }\r\n        },\r\n\r\n        \"parent\": {\r\n            //desc: \"Gets the parent tree item of the current tree item.\",\r\n            //type: TreeItem\r\n            get : function(){\r\n                return this._.parent;\r\n            }\r\n        },\r\n\r\n        \"prev\": {\r\n            //desc: \"Gets the previous tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var prevSibling = this.prevSibling,\r\n                    prevItem;\r\n                if (prevSibling) {\r\n                    prevItem = prevSibling.lastDescendants;\r\n                    if (!prevItem) {\r\n                        prevItem = prevSibling;\r\n                    }\r\n                } else {\r\n                    prevItem = this.parent;\r\n                }\r\n\r\n                return prevItem;\r\n            }\r\n        },\r\n\r\n        \"prevSibling\": {\r\n            //desc: \"Gets the previous sibling tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var parent = this.parent;\r\n                return parent && parent.getPrevChild(this);\r\n            }\r\n        },\r\n\r\n        \"root\": {\r\n            //desc: \"Gets the tree that the tree item is assigned to.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var r = this;\r\n                while (r.parent) {\r\n                    r = r.parent;\r\n                }\r\n                return r;\r\n            }\r\n        },\r\n        /*\r\n         *\r\n         *@method prepend a child item.\r\n         *@return TreeItem\r\n         */\r\n        \"prependChild\": function( /*Object*/ item) {\r\n            return this.addChild(item, 0);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method add a Child item\r\n         *@return TreeItem\r\n         */\r\n        \"addChild\": function( /*Object*/ item, at) {\r\n            this._checkPublicOperation(\"addChild\");\r\n            var child = this._internalAddChild(item, at);\r\n\r\n            this.trigger(\"changed:addChild\",{\r\n                \"data\" :  [\r\n                    { \"item\" : child, \"index\": at, isSingle: true}\r\n                ]\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method addChildLast\r\n         *@return TreeItem\r\n         */\r\n        \"appendChild\": function( /*Object*/ item) {\r\n            return this.addChild(this);\r\n        },\r\n\r\n        \"canHaveChildren\": function() {\r\n            var children = this._internalChildren();\r\n            return children !== undefined;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return Number\r\n         */\r\n        \"childrenCount\": function() {\r\n            var children = this._internalChildren();\r\n            return children ? children.length : 0;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method clearChildren\r\n         *@return\r\n         */\r\n        \"clearChildren\": function() {\r\n            this._checkPublicOperation(\"clearChildren\");\r\n            this._internalClearChildren();\r\n\r\n            this.trigger(\"changed:clearChildren\");                    \r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getChildAt\r\n         *@return TreeItem\r\n         */\r\n        \"getChildAt\": function( /*Number*/ index) {\r\n            var children = this._internalChildren();\r\n            return children[index];\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getChildren\r\n         *@return Array\r\n         */\r\n        \"getChildren\": function() {\r\n            return this.children;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getPrevChild\r\n         *@return TreeItem\r\n         */\r\n        \"getPrevChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren(),\r\n                idx = children.indexOf(child);\r\n            if (idx > 0) {\r\n                return children[idx - 1];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getNextChild\r\n         *@return TreeItem\r\n         */\r\n        \"getNextChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren(),\r\n                idx = children.indexOf(child);\r\n            if (idx >= 0 && idx < children.length - 1) {\r\n                return children[idx + 1];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         *@method hasChildren\r\n         *@return {Boolean}\r\n         *  true  if this node has children.\r\n         */\r\n        \"hasChildren\": function() {\r\n            var children = this._internalChildren();\r\n            return children && children.length > 0;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"indexOfChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren();\r\n            return children.indexOf(child);\r\n        },\r\n\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"insertChild\": function( /*Object*/ data, /*Number*/ index) {\r\n            return this.addChild(item, index);\r\n        },\r\n\r\n        parents : function() {\r\n            var r = [],\r\n                p = this.parent;\r\n            while (p) {\r\n                r.push(p);\r\n                p = p.parent;\r\n            }\r\n            return r;\r\n        },\r\n\r\n        /*\r\n         *Removes the current tree item from the tree.\r\n         *@method remove\r\n         */\r\n        \"remove\": function() {\r\n            var parent = this.parent;\r\n            if (parent) {\r\n                parent.removeChild(this);\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method removeChild\r\n         *@return TreeItem\r\n         */\r\n        \"removeChild\": function( /*TreeItem*/ child) {\r\n            var at = this.indexOfChild(child);\r\n            if (at>-1) {\r\n                return this.removeChildAt(at);\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"removeChildAt\": function( /*Number*/ at) {\r\n            this._checkPublicOperation(\"removeChild\");\r\n\r\n            this._internalRemoveChildAt(at);\r\n\r\n            this.trigger(\"changed:removeChild\",{\r\n                \"data\" : [\r\n                    { \"item\" : item, \"index\" : at}\r\n                ]\r\n            });\r\n        },\r\n\r\n        \"init\"  :   function(data){\r\n            var _ = this._ = {};\r\n            _.data = data;\r\n            _.name = data.name;\r\n            _.children = [];\r\n        }\r\n        \r\n    });\r\n\r\n    return TreeItem;\r\n});\r\n\n\r\ndefine('skylark-utils-collection/Tree',[\r\n    \"./collections\",\r\n\t\"./Collection\",\r\n\t\"./ArrayList\",\r\n\t\"./TreeItem\"\r\n],function(collections,Collection,ArrayList,TreeItem){\r\n\r\n\r\n\tvar Tree = collections.Tree = Collection.inherit({\r\n\r\n\t\t/*\r\n\t\t *@method createNode\r\n\t\t *@return {TreeNode}\r\n\t\t */\r\n\t\t\"createItem\"\t:\tfunction(/*Object*/data){\r\n\t\t\treturn new Tree.TreeItem(data);\r\n\r\n\t\t},\r\n\r\n\t\t\"items\" : {\r\n\t\t\t//type : Array,\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this.toArray();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n        \"iterator\" : function() {\r\n            var nextItem = this.firstItem();\r\n            return {\r\n                hasNext : function() {\r\n                    return nextItem;\r\n                },\r\n                next : function() {\r\n                \tif (nextItem) {\r\n\t                \tvar ret = nextItem;\r\n\t                \tnextItem = ret.next;\r\n\t                    return ret ;\r\n                \t}\r\n                }\r\n            }\r\n        },\r\n\r\n\t\t/*\r\n\t\t *@method count\r\n\t\t *@return {Number}\r\n\t\t */\r\n\t\tcount : /*Number*/function () {\r\n\t\t\tvar c = 0;\r\n\t\t\tthis.forEach(function(item){\r\n\t\t\t\tc+=1;\r\n\t\t\t});\r\n        \treturn c;\r\n        },\r\n\r\n        firstItem : function() {\r\n        \tvar children = this._.children;\r\n        \tif (children && children.length) {\r\n        \t\treturn children[0];\r\n        \t} else {\r\n        \t\treturn null;\r\n        \t}\r\n        },\r\n\r\n        lastItem : function() {\r\n        \tvar last = function(item,noself) {\r\n        \t\tvar children = item.children;\r\n        \t\tif (children && children.length) {\r\n        \t\t\treturn last(children[children.length-1],false);\r\n        \t\t} else {\r\n        \t\t\treturn noself ? null : item;\r\n        \t\t}\r\n        \t}\r\n        \treturn last(item,true)\r\n        },\r\n\r\n\t\t\"init\"\t:\tfunction() {\r\n\t\t\tthis._.children = [];\r\n\t\t}\r\n\t});\r\n\r\n\tTree.TreeItem = TreeItem;\r\n\r\n\treturn Tree;\r\n\r\n});\r\n\ndefine('skylark-utils-collection/main',[\r\n\t\"./collections\",\r\n\t\"./Collection\",\r\n\t\"./List\",\r\n\t\"./Map\",\r\n\t\"./ArrayList\",\r\n\t\"./PagedList\",\r\n\t\"./Queue\",\r\n\t\"./Set\",\t\r\n\t\"./Stack\",\t\r\n\t\"./Tree\",\r\n\t\"./TreeItem\"\r\n],function(collections){\r\n\treturn collections;\r\n});\ndefine('skylark-utils-collection', ['skylark-utils-collection/main'], function (main) { return main; });\n\n"]}