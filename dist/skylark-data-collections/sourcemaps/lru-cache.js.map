{"version":3,"sources":["lru-cache.js"],"names":["define","collections","LruNode","LruCache","[object Object]","limit","this","size","map","head","tail","key","value","node","remove","prev","next","setHead"],"mappings":";;;;;;;AAAAA,QACI,gBACA,cACD,SAASC,EAAYC,GAsFpB,OAAOD,EAAYE,eAnFfC,YAAYC,GACRC,KAAKD,MAAQA,EACbC,KAAKC,KAAO,EACZD,KAAKE,OACLF,KAAKG,KAAO,KACZH,KAAKI,KAAO,KAMhBN,IAAIO,EAAKC,GACL,MAAMC,EAAO,IAAIX,EAAQS,EAAKC,GAC1BN,KAAKE,IAAIG,IACTL,KAAKE,IAAIG,GAAKC,MAAQC,EAAKD,MAC3BN,KAAKQ,OAAOD,EAAKF,MAGbL,KAAKC,MAAQD,KAAKD,eACXC,KAAKE,IAAIF,KAAKI,KAAKC,KAC1BL,KAAKC,OACLD,KAAKI,KAAOJ,KAAKI,KAAKK,KACtBT,KAAKI,KAAKM,KAAO,MAGzBV,KAAKW,QAAQJ,GAGjBT,IAAIO,GACA,GAAIL,KAAKE,IAAIG,GAAM,CACf,MAAMC,EAAQN,KAAKE,IAAIG,GAAKC,MACtBC,EAAO,IAAIX,EAAQS,EAAKC,GAG9B,OAFAN,KAAKQ,OAAOH,GACZL,KAAKW,QAAQJ,GACND,EAGP,OAAO,KAIfR,OAAOO,GACH,MAAME,EAAOP,KAAKE,IAAIG,GACjBE,IAGa,OAAdA,EAAKE,KACLF,EAAKE,KAAKC,KAAOH,EAAKG,KAGtBV,KAAKG,KAAOI,EAAKG,KAEH,OAAdH,EAAKG,KACLH,EAAKG,KAAKD,KAAOF,EAAKE,KAGtBT,KAAKI,KAAOG,EAAKE,YAEdT,KAAKE,IAAIG,GAChBL,KAAKC,QAGTH,YACIE,KAAKC,KAAO,EACZD,KAAKE,OACLF,KAAKG,KAAO,KACZH,KAAKI,KAAO,KAEhBN,QAAQS,GACJA,EAAKG,KAAOV,KAAKG,KACjBI,EAAKE,KAAO,KACM,OAAdT,KAAKG,OACLH,KAAKG,KAAKM,KAAOF,GAErBP,KAAKG,KAAOI,EACM,OAAdP,KAAKI,OACLJ,KAAKI,KAAOG,GAEhBP,KAAKC,OACLD,KAAKE,IAAIK,EAAKF,KAAOE","file":"../lru-cache.js","sourcesContent":["define([\r\n    \"./collections\",\r\n    \"./lru-node\"\r\n], function(collections,LruNode) {\r\n   // Adapted from https://chrisrng.svbtle.com/lru-cache-in-javascript\r\n    class LruCache {\r\n        constructor(limit) {\r\n            this.limit = limit;\r\n            this.size = 0;\r\n            this.map = {};\r\n            this.head = null;\r\n            this.tail = null;\r\n        }\r\n        /**\r\n         * Change or add a new value in the cache\r\n         * We overwrite the entry if it already exists\r\n         */\r\n        set(key, value) {\r\n            const node = new LruNode(key, value);\r\n            if (this.map[key]) {\r\n                this.map[key].value = node.value;\r\n                this.remove(node.key);\r\n            }\r\n            else {\r\n                if (this.size >= this.limit) {\r\n                    delete this.map[this.tail.key];\r\n                    this.size--;\r\n                    this.tail = this.tail.prev;\r\n                    this.tail.next = null;\r\n                }\r\n            }\r\n            this.setHead(node);\r\n        }\r\n        /* Retrieve a single entry from the cache */\r\n        get(key) {\r\n            if (this.map[key]) {\r\n                const value = this.map[key].value;\r\n                const node = new LruNode(key, value);\r\n                this.remove(key);\r\n                this.setHead(node);\r\n                return value;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        /* Remove a single entry from the cache */\r\n        remove(key) {\r\n            const node = this.map[key];\r\n            if (!node) {\r\n                return;\r\n            }\r\n            if (node.prev !== null) {\r\n                node.prev.next = node.next;\r\n            }\r\n            else {\r\n                this.head = node.next;\r\n            }\r\n            if (node.next !== null) {\r\n                node.next.prev = node.prev;\r\n            }\r\n            else {\r\n                this.tail = node.prev;\r\n            }\r\n            delete this.map[key];\r\n            this.size--;\r\n        }\r\n        /* Resets the entire cache - Argument limit is optional to be reset */\r\n        removeAll() {\r\n            this.size = 0;\r\n            this.map = {};\r\n            this.head = null;\r\n            this.tail = null;\r\n        }\r\n        setHead(node) {\r\n            node.next = this.head;\r\n            node.prev = null;\r\n            if (this.head !== null) {\r\n                this.head.prev = node;\r\n            }\r\n            this.head = node;\r\n            if (this.tail === null) {\r\n                this.tail = node;\r\n            }\r\n            this.size++;\r\n            this.map[node.key] = node;\r\n        }\r\n    }\r\n\r\n    return collections.LruCache = LruCache;\r\n});"]}